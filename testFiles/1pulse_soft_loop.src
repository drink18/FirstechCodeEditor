/*-------------------------------------------------------------------------------------------------
(C) COPYRIGHT 2016 FIRSTECH Co., Ltd. ALL RIGHTS RESERVED
This software and the associated documentation are confidential and proprietary to Firstech Co., Ltd. 
Project name     :    MRI                                         
File name        :    fse.src                                            
Author           :    pengjing                                            
Contacts         :                                                
Date             :    2016.6.3                                            
File version     :                                                
Key words        :                                                
File discription :                                                
Modified history :                                                
Date       Author             Version          Details            
======================================================== 
2016.6.3   pengjing           v1.0         
--------------------------------------------------------------------------------------------------*/

import TX 0 0 "D:\\FT_mri_working\\firstech_lib_bak_0526\\wave\\adiabaticExa2.rfwave" adiabaticExa2
import TX 0 11 "D:\\FT_mri_working\\firstech_lib_bak_0526\\wave\\Rect_lob3_1.333KHz_2us_1500_3000us.rfwave" Rect_lob3_1333Hz_2us_1500_3000us
#include "common.h"     
#include "grad.h"       
#include "tx.h"         
#include "rx.h"         
#include "mainctrl.h"   

double noEchoes = 1.0;                         
double noScans  = 25600.0;  
double noAverages = 1.0;                                   
double samplePeriod=2;                        
double noSamples =4096.0;                                                
double TR = 50.0;//ms        
double TE = 50000.0;//us                                                                                  
double tsel90 =8000;//2560.0; //us               
double rf90Scale=10.0;                     
double rxGain = 0.5;//db                  
double ttxgatepost = 0.0;                
double ttxgatepre = 0.0;                     
double tx_freq_offset_data = 0.0;//KHZ    
double tx_ph_offset_data = 0.0;//0??       
double trxgatepre =0;// 10.0;                 
double trxgatepost = 0;//10.0;                    
double rx_freq_offset_data = 0.0;//KHZ    
double rx_ph_offset_data = 0.0;//0??                             
                
double trend = 1000.0;//
double preDiscard = 0.0;
double GMAX=0.0;
double tx_delay=100.0;
double pre_sample_tx = 50;
double rf_Shape_NO = 0;

void main()
{
	  MainctrlTrigger( noAverages, noScans, TR);

      	   gradS:
    {
    	double temp=1.0;
      TimerCmp(temp ,US);
      averages_loop: 
      goto averages_loop;
    }
          	   gradR:
    {
    double temp=1.0;
      TimerCmp(temp ,US);
      averages_loop: 
      goto averages_loop;
    }      	 
      	   gradP:
    {
     double temp=1.0;
      TimerCmp(temp ,US);
      averages_loop: 
      goto averages_loop;
    } 
    
	 tx1:
	 {
		 double trampTime;
		 double fix_delaytime;
		 double delayTime_rf90_1; 

     TxChannelShapeSel(CHANNEL1,rf_Shape_NO); 
             
		 tx_start:
		 TxFirReset(); 
		 TxFreqOffsetReg(CHANNEL1,tx_freq_offset_data,KHZ);
		 TxPhaseOffsetReg(CHANNEL1,tx_ph_offset_data);
	//	 TxHardPulseShape(CHANNEL1,tsel90);  
		 TxAttReg(CHANNEL1,rf90Scale);//ch,att db 
		 fix_delaytime = tx_delay;//100;//trampTime;		 
		 delayTime_rf90_1=fix_delaytime; 
		 WaitTrigger();

       delayTime_rf90_1 = fix_delaytime;
		 TimerCmp(delayTime_rf90_1,US);
		 TxStart(CHANNEL1,tsel90,ttxgatepre,ttxgatepost);
       
       goto tx_start;
	 }

  
	 rx1:
	 {
		 double fix_delaytime;
		 double sample_period;
		 double delayTime_c1; 
       double sample_total;     
       
       RxFreqOffsetReg(CHANNEL1,rx_freq_offset_data,KHZ);
       RxFreqOffsetReg(CHANNEL2,rx_freq_offset_data,KHZ);
       RxFreqOffsetReg(CHANNEL3,rx_freq_offset_data,KHZ);
       RxFreqOffsetReg(CHANNEL4,rx_freq_offset_data,KHZ);
       RxFreqOffsetReg(CHANNEL5,rx_freq_offset_data,KHZ);
       RxFreqOffsetReg(CHANNEL6,rx_freq_offset_data,KHZ);
       RxFreqOffsetReg(CHANNEL7,rx_freq_offset_data,KHZ);
       RxFreqOffsetReg(CHANNEL8,rx_freq_offset_data,KHZ);
  
		RxPhaseOffsetReg(CHANNEL1,rx_ph_offset_data);
      RxPhaseOffsetReg(CHANNEL2,rx_ph_offset_data);
      RxPhaseOffsetReg(CHANNEL3,rx_ph_offset_data);
      RxPhaseOffsetReg(CHANNEL4,rx_ph_offset_data);
      RxPhaseOffsetReg(CHANNEL5,rx_ph_offset_data);
      RxPhaseOffsetReg(CHANNEL6,rx_ph_offset_data);
      RxPhaseOffsetReg(CHANNEL7,rx_ph_offset_data);
      RxPhaseOffsetReg(CHANNEL8,rx_ph_offset_data);
       sample_total =preDiscard +  noSamples;
		 sample_period=RxChannelAcquirePara(samplePeriod,sample_total);
       RxGainReg(CHANNEL1,rxGain);  //ch, db att  
       RxGainReg(CHANNEL2,rxGain);  //ch, db att  
       RxGainReg(CHANNEL3,rxGain);  //ch, db att  
       RxGainReg(CHANNEL4,rxGain);  //ch, db att  
       RxGainReg(CHANNEL5,rxGain);  //ch, db att  
       RxGainReg(CHANNEL6,rxGain);  //ch, db att  
       RxGainReg(CHANNEL7,rxGain);  //ch, db att  
       RxGainReg(CHANNEL8,rxGain);  //ch, db att  
       fix_delaytime =TX_FILTER_DELAY-pre_sample_tx;
		 rx_start:   
      RxPhaseOffsetReg(CHANNEL1,rx_ph_offset_data);  
		 WaitTrigger(); 
       delayTime_c1 = fix_delaytime ;
		 TimerCmp(delayTime_c1,US);
		 RxStart(255,trxgatepre,trxgatepost,sample_period);
		  
		 goto rx_start;
	 }
  
}
