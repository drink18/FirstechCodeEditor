/*-------------------------------------------------------------------------------------------------
(C) COPYRIGHT 2016 FIRSTECH Co., Ltd. ALL RIGHTS RESERVED
This software and the associated documentation are confidential and proprietary to Firstech Co., Ltd. 
Project name     :    MRI                                         
File name        :    fse.src                                            
Author           :    pengjing                                            
Contacts         :                                                
Date             :    2016.6.3                                            
File version     :                                                
Key words        :                                                
File discription :                                                
Modified history :                                                
Date       Author             Version          Details            
======================================================== 
2016.6.3   pengjing           v1.0         
--------------------------------------------------------------------------------------------------*/

#include "common.h"     
#include "grad.h"       
#include "tx.h"         
#include "rx.h"         
#include "mainctrl.h"   

double noEchoes = 1.0;                         
double noScans  = 40.0;  
double noAverages = 1.0;                     
double noSliceBlock = 1.0;
double no_View_Block = 256.0;                 
double samplePeriod=20.0;                        
double noSamples =4096.0;                                         
double gradWavePoint = 500.0;             
double gradSamplePeriod = 1.0;//us        
double TR = 500.0;//ms        
double TE = 50000.0;//us                                                                                  
double tsel90 =3000.0;//2560.0; //us               
double rf90Scale=40.0;                     
double rxGain = 0.5;//db                  
double ttxgatepost = 10.0;                
double ttxgatepre = 10.0;                     
double tx_freq_offset_data = 0.0;//KHZ    
double tx_ph_offset_data = 0.0;//0??       
double trxgatepre = 10.0;                 
double trxgatepost = 10.0;                    
double rx_freq_offset_data = 0.0;//KHZ    
double rx_ph_offset_data = 0.0;//0??    
double ext_gain = 3;                          
                
double trend = 1000.0;//
double preDiscard = 20.0;
double GMAX=0.0;
int rf_Shape_NO =0; 

void main()
{
   setr(0x2c ,ext_gain);
	  MainctrlTrigger( noAverages, noScans, TR);

      	   gradS:
    {
    	double temp=1.0;
      TimerCmp(temp ,US);
      averages_loop: 
      goto averages_loop;
    }
          	   gradR:
    {
    double temp=1.0;
      TimerCmp(temp ,US);
      averages_loop: 
      goto averages_loop;
    }      	 
      	   gradP:
    {
     double temp=1.0;
      TimerCmp(temp ,US);
      averages_loop: 
      goto averages_loop;
    } 
    
	 tx1:
	 {
		 double trampTime;
		 double fix_delaytime;
		 double delayTime_rf90_1; 
		 double delayTime_rf180_c1; 
		 double rep_cnt = 0.0;
		 double rep_cnt1 = 0.0; 
     double Ave_rep_cnt = 0.0;
     double Slice_rep_time_tmp = 0.0;
     TxChannelShapeSel(CHANNEL1,rf_Shape_NO);        
		 tx_start:
		 TxFirReset(); 
		 TxFreqOffsetReg(CHANNEL1,tx_freq_offset_data,KHZ);
		 TxPhaseOffsetReg(CHANNEL1,tx_ph_offset_data);  
		 TxAttReg(CHANNEL1,rf90Scale);//ch,att db 
		 trampTime = gradWavePoint * gradSamplePeriod;
		 fix_delaytime = trampTime;		 
		 delayTime_rf90_1=fix_delaytime; 
     delayTime_rf180_c1=fix_delaytime+TE*0.5; 
     Slice_rep_time_tmp = (noEchoes+1)*TE;
        
		 WaitTrigger();
       rep_cnt = 0.0;
       slice_loop:
       rep_cnt1 = 0.0;
       delayTime_rf90_1 = fix_delaytime+Slice_rep_time_tmp*rep_cnt;
		 TimerCmp(delayTime_rf90_1,US);
		 TxStart(CHANNEL1,tsel90,ttxgatepre,ttxgatepost);
		 rf90Scale = rf90Scale - 1;
		 
       rep_cnt = rep_cnt + 1.0;
       if(rep_cnt < noSliceBlock )
       goto slice_loop;
       
       goto tx_start;
	 }

  
	 rx1:
	 {
		 double trampTime;
		 double fix_delaytime;
		 double sample_period;
		 double delayTime_1; 
		 double delayTime_c1; 
		 double rep_cnt = 0.0;
		 double rep_cnt1 = 0.0; 
       double Ave_rep_cnt = 0.0;
       double Slice_rep_time_tmp = 0.0;
       double rx_ph_offset_data_tmp = 0.0;
       double sample_total;
       double tacq;
		 rx_start:
		
		 RxFreqOffsetReg(CHANNEL1,rx_freq_offset_data,KHZ);
		 RxPhaseOffsetReg(CHANNEL1,rx_ph_offset_data);
       sample_total =preDiscard +  noSamples;
		 sample_period=RxChannelAcquirePara(samplePeriod,sample_total);
       tacq=AcquireDuration(samplePeriod,noSamples);
		 RxGainReg(CHANNEL1,rxGain);  //ch, db att  
		 trampTime = gradWavePoint * gradSamplePeriod;
		 fix_delaytime = TX_FILTER_DELAY-trxgatepre;//+trampTime;
		 delayTime_c1=fix_delaytime+TE-tacq*0.5+tsel90*0.5; 
       Slice_rep_time_tmp = (noEchoes+1)*TE;
       rx_ph_offset_data_tmp = rx_ph_offset_data +180.0;
		 WaitTrigger();
       rep_cnt = 0.0; 
       if(noAverages>1)  
       {            
           if(Ave_rep_cnt==0.0)
           {
              RxPhaseOffsetReg(CHANNEL1,rx_ph_offset_data);
              Ave_rep_cnt = Ave_rep_cnt+1.0;
           }else{
              Ave_rep_cnt = 0.0;
              RxPhaseOffsetReg(CHANNEL1,rx_ph_offset_data_tmp);
           }
       }
       slice_loop:
       rep_cnt1 = 0.0;
       delayTime_c1 = fix_delaytime+tsel90 +Slice_rep_time_tmp*rep_cnt; 
		 rx_repeated_start1:
			 rep_cnt1 = rep_cnt1+1.0;
			 TimerCmp(delayTime_c1,US);
			 RxStart(CHANNEL1,trxgatepre,trxgatepost,sample_period);
			 delayTime_c1 = delayTime_c1 + TE;
			 if(rep_cnt1 < noEchoes )
		  goto rx_repeated_start1;
		  
          rep_cnt = rep_cnt + 1.0;
          if(rep_cnt < noSliceBlock )
           goto slice_loop;
		 goto rx_start;
	 }
  
}
