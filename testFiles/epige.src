/*-------------------------------------------------------------------------------------------------
(C) COPYRIGHT 2016 FIRSTECH Co., Ltd. ALL RIGHTS RESERVED
This software and the associated documentation are confidential and proprietary to Firstech Co., Ltd. 
Project name     :    MRI                                         
File name        :    epige.src                                            
Author           :    pengjing                                            
Contacts         :                                                
Date             :    2017.1.9                                            
File version     :                                                
Key words        :                                                
File discription :                                                
Modified history :                                                
Date       Author             Version          Details            
======================================================== 
2017.1.9    pengjing           v1.0         
--------------------------------------------------------------------------------------------------*/

#include "common.h"     
#include "grad.h"       
#include "tx.h"         
#include "rx.h"         
#include "mainctrl.h"   

double noEchoes = 1.0;                         
double noScans  = 1.0;  
double noAverages = 1.0;                     
double noSliceBlock = 1.0;                       
double noSamples =6656.0; //noSamples= [noPtsSwitch +2*noPtsRamp]*noSwitches
double noPtsSwitch = 64.0;
double noPtsRamp = 20.0;  //gradWavePoint*gradSamplePeriod = samplePeriod*noPtsRamp
double noSwitches = 64.0;
double samplePeriod=25.0; 
double effectiveEcho = 1.0; 
double fovPhase = 250.0;
double fovRead  = 250.0;
double TR = 500.0;//ms        
double TE = 16000.0;//us
double distanceSlice1 = 0.0;
double thickSlice = 5.0;
double seperationSlice = 10.0;
double orderSlice = 1.0;
double ratioPhaseSampling = 1.0;
double ratioFreqSampling = 1.0;
double partialFreqSampling = 0.0;
double partialPhaseSampling = 0.0;
double modeAverage = 0.0;
double phaseCycle = 0.0;
double fovPhaseOffset = 0.0;
double fovReadOffset = 0.0;
double dummyShot = 0.0;
double modePhaseCode = 1.0;
double orderPhaseCode = 1.0;
double modePartialPhaseSampling = 0.0;
double blip_on = 0.0;

int rf_Shape_NO =0;                       
double tsel90 =2560.0; //us 
double rf90Bandwidth = 960.0;               
double rf90Scale=12.5;      
double gradWavePoint = 500.0;             
double gradSamplePeriod = 1.0;//us                
double rxGain = 0.0;//db                  
double tx_freq_offset_data = 0.0;//KHZ    
double tx_ph_offset_data = 0.0;//0??                      
double rx_freq_offset_data = 0.0;//KHZ    
double rx_ph_offset_data = 0.0;//0?? 
double preDiscard = 2.0;
double PreGradTime = 40.0; // > TX_GRA_DELAY 32.0us
double UnifiedTDelay = 10.0;//Unified time delay(US)
double thickSliceRatioGain = 1.32;
double gradMatrixSel = 0;
double sepeceSliceTime = 40000.0; // TR/noSliceBlock > sepeceSliceTime >TE * noEchos 
double ratiaFreqOversampling = 1.0;
             
void main()
{
    MainctrlTrigger( noAverages, noScans, TR);

    gradS:
    {

        double trampTime;
        double fixDelayTime;
        double tdp;
        double delayTime1;
	    double gs_var;
        double gs_comp; 
        double rep_cnt;
        int waveSel1_1;
        int waveSel1_2;
       
        trampTime = gradWavePoint * gradSamplePeriod;
        fixDelayTime = UnifiedTDelay;
	   
        averages_loop: 
        GradMatSel(gradMatrixSel);
	    gs_var = GardSliceGain(rf90Bandwidth,thickSlice,thickSliceRatioGain);
		tdp = tsel90 * 0.5;
		gs_comp = 0.5*gs_var*(tsel90+trampTime)/(tdp+trampTime);    
	  
        waveSel1_1 = 0;
        waveSel1_2 = 1;
       
        rep_cnt = 0.0;      
        WaitTrigger(); 

        slice_loop:
        delayTime1 = fixDelayTime + sepeceSliceTime*rep_cnt; 

 	    TimerCmp(delayTime1,US); 
        TrapezoidTwoFixTrampTimeStart( waveSel1_1,waveSel1_2,waveSel1_2,waveSel1_1,\
                                       tsel90, 0.0, tdp, trampTime,gs_var, gs_comp);						
 
        rep_cnt = rep_cnt + 1.0;
        if(rep_cnt < noSliceBlock )
        goto slice_loop; 
          
        goto averages_loop;
    }
       
    gradR:
    {
       
        double trampTime;
        double fixDelayTime;
        double t_comp;
        double delayTime1; 		
        double delayTime2; 
        double gr_var;
        double gr_comp;	
        double tacq;
		double tplat;
		double tdp;
        double noSwitches_2 ;
		double rep_cnt;
        int waveSel1_1;
        int waveSel1_2;
		
        trampTime = gradWavePoint * gradSamplePeriod;
        fixDelayTime = UnifiedTDelay;
        tacq = AcquireDuration(samplePeriod,noSamples);
        tplat = (tacq -(2*noSwitches*trampTime))/noSwitches;
        tdp = tsel90*0.5;
        gr_var = GardReadGain( samplePeriod, fovRead, ratiaFreqOversampling);
		gr_comp = gr_var * (tplat + trampTime) * 0.5/(tdp+trampTime);
		noSwitches_2 = noSwitches*0.5; 		
        waveSel1_1 = 0;
        waveSel1_2 = 1;
      
        averages_loop:
        
        rep_cnt = 0.0; 
        		
        WaitTrigger(); 
        slice_loop: 		
        delayTime1 = fixDelayTime + tsel90 + trampTime*2 +sepeceSliceTime*rep_cnt; 
		delayTime2 = delayTime1 + tdp + trampTime*2+ PreGradTime; 		

		TimerCmp(delayTime1 ,US);
        TrapezoidOneFixTrampTimeStart( waveSel1_2,waveSel1_1,tdp,trampTime,gr_comp);
		TimerCmp(delayTime2 ,US);			
        epiReadStart(noSwitches_2,waveSel1_1,waveSel1_2,tplat,trampTime,gr_var);			

        rep_cnt = rep_cnt + 1.0;
        if(rep_cnt < noSliceBlock )
        goto slice_loop; 
          
        goto averages_loop; 
    }


    gradP:
    {
       
        double trampTime;
        double fixDelayTime;
        double holdTime1;
        double delayTime1;
		double delayTime2;
		double tdp;
        double rep_cnt;
        double gp_var_blip;
		double gp_var_rescale;
		double tacq;
		double tplat;
		double gp_var_cont;
		double noSwitchestmp;
        int waveSel1_1;
        int waveSel1_2;
		
        trampTime = gradWavePoint * gradSamplePeriod;
        fixDelayTime =  UnifiedTDelay;
        tacq = AcquireDuration(samplePeriod,noSamples);
        tplat = (tacq -(2*noSwitches*trampTime))/noSwitches;		
		tdp = tsel90*0.5;

		// Area of phase blip, A1 = trampTime * gp_var_blip/2
        // Area of dephase pulse, A2 = (tdp + trampTime) * gp_var_rescale
        // 2*A2 = noSwitches*A1 
		
		noSwitchestmp = noSwitches - 1;
		gp_var_blip = 1000000.0/(fovPhase*trampTime);
		gp_var_rescale = gp_var_blip*trampTime*0.5*noSwitchestmp*0.5/(tdp + trampTime);
		gp_var_cont = gp_var_rescale * (tdp + trampTime)/(tacq + trampTime);

        waveSel1_1 = 0;
        waveSel1_2 = 1;  
		
        averages_loop:
        rep_cnt = 0.0;       
        WaitTrigger(); 
               
        slice_loop:
        delayTime1 = fixDelayTime + tsel90 + trampTime*2 +sepeceSliceTime*rep_cnt; 
		delayTime2 = delayTime1 + tdp + trampTime*2+ PreGradTime;
		
		TimerCmp(delayTime1,US); 
		TrapezoidOneFixTrampTimeStart( waveSel1_2,waveSel1_1,tdp,trampTime,gp_var_rescale);        
        
		if(blip_on == 1)
        {
		    TimerCmp(delayTime2,US); 
		    TrapezoidOneFixTrampTimeStart( waveSel1_1,waveSel1_2,tacq,trampTime,gp_var_cont);
        }else{
		    TimerCmp(delayTime2,US); 
            epiPhaseStart(noSwitchestmp,waveSel1_1,waveSel1_2,tplat,trampTime,gp_var_blip);  
		}		
      
        rep_cnt = rep_cnt + 1.0;
        if(rep_cnt < noSliceBlock )
        goto slice_loop; 
          
        goto averages_loop; 
    }  
 
    tx1:
    {
        double trampTime;
        double fixDelayTime;
        double delayTime_rf90_1; 
        double delayTime_rf180_c1; 
        double rep_cnt = 0.0;
        double ttxgatepost = 10.0;                
        double ttxgatepre = 10.0; 
        double noSlice=0.0;     

        TxChannelShapeSel(CHANNEL1,rf_Shape_NO);
        trampTime = gradWavePoint * gradSamplePeriod;
        fixDelayTime = trampTime + UnifiedTDelay;
        tx_start:
        TxFirReset(); 
        WaitTrigger();

        TxAvePhase( modeAverage,noAverages,tx_freq_offset_data, tx_ph_offset_data,KHZ, CHANNEL1);
       
        rep_cnt = 0.0;
       
        slice_loop:     
        noSlice = TxSliceCount( orderSlice,  noSliceBlock, rep_cnt);
      
        TxFreqSet( orderSlice, distanceSlice1, seperationSlice,thickSlice,\
                     noSlice, rf90Bandwidth, CHANNEL1,thickSliceRatioGain);
 
        delayTime_rf90_1 = fixDelayTime+sepeceSliceTime*rep_cnt;
        TxPhaseCycle(CHANNEL1, phaseCycle, noAverages,rep_cnt);
        TxAttReg(CHANNEL1,rf90Scale);//ch,att db 
        TimerCmp(delayTime_rf90_1,US);
        TxStart(CHANNEL1,tsel90,ttxgatepre,ttxgatepost);
        
        rep_cnt = rep_cnt + 1.0;
        if(rep_cnt < noSliceBlock )
        goto slice_loop;
    
        goto tx_start;
    }

    rx1:
    {
        double trampTime;
        double fixDelayTime;
        double sample_period;
        double delayTime1; 
        double delayTime2; 
        double rep_cnt = 0.0;
		double rep_sw_cnt = 0.0;
        double sample_total;
        double tacq;
		double tdp;
		double tplat;
        double noPreEffSample;
        double trxgatepre = 10.0;                 
        double trxgatepost = 10.0; 

        rx_start:
      
        RxFreqOffsetReg(CHANNEL1,rx_freq_offset_data,KHZ);
        RxPhaseOffsetReg(CHANNEL1,rx_ph_offset_data);       
        RxFreqOffsetReg(CHANNEL2,rx_freq_offset_data,KHZ);
        RxPhaseOffsetReg(CHANNEL2,rx_ph_offset_data);     
        RxFreqOffsetReg(CHANNEL3,rx_freq_offset_data,KHZ);
        RxPhaseOffsetReg(CHANNEL3,rx_ph_offset_data);     
        RxFreqOffsetReg(CHANNEL4,rx_freq_offset_data,KHZ);
        RxPhaseOffsetReg(CHANNEL4,rx_ph_offset_data);  
		RxGainReg(CHANNEL1,rxGain);  //ch, db att  
        RxGainReg(CHANNEL2,rxGain);  //ch, db att  
        RxGainReg(CHANNEL3,rxGain);  //ch, db att  
        RxGainReg(CHANNEL4,rxGain);  //ch, db att  
		
        sample_total = preDiscard +  noPtsSwitch;
        sample_period= RxChannelAcquirePara(samplePeriod,sample_total);
		tacq = AcquireDuration(samplePeriod,noSamples);
        trampTime = gradWavePoint * gradSamplePeriod;
        fixDelayTime = TX_FILTER_DELAY-trxgatepre +UnifiedTDelay;
        tplat = (tacq -(2*noSwitches*trampTime))/noSwitches;	
		tdp = tsel90 * 0.5;
        WaitTrigger();

        rep_cnt = 0.0; 
        slice_loop:
        delayTime1 = fixDelayTime + tsel90 + tdp+ trampTime*4 + PreGradTime+sepeceSliceTime*rep_cnt; 
		delayTime2 = delayTime1 + trampTime;
		rep_sw_cnt = 0.0;
		switch_loop:
        TimerCmp(delayTime2,US);
        RxStart(15,trxgatepre,trxgatepost,sample_period);
        delayTime2 = delayTime2 + tplat + trampTime*2.0; 
        rep_sw_cnt = rep_sw_cnt + 1.0;
        if(rep_sw_cnt < noSwitches )
        goto switch_loop;
		
        rep_cnt = rep_cnt + 1.0;
        if(rep_cnt < noSliceBlock )
        goto slice_loop;
         
        goto rx_start;
    }

}
      






