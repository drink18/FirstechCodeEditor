/*-------------------------------------------------------------------------------------------------
(C) COPYRIGHT 2016 FIRSTECH Co., Ltd. ALL RIGHTS RESERVED
This software and the associated documentation are confidential and proprietary to Firstech Co., Ltd. 
Project name     :    MRI                                         
File name        :    ge2d.src                                            
Author           :    liwanru                                            
Contacts         :                                                
Date             :    2017.04.24                                           
File version     :                                                
Key words        :                                                
File discription :                                                
Modified history :                                                
Date       Author             Version          Details            
======================================================== 
2017.04.24   liwanru           v1.0      
========================================================

--------------------------------------------------------------------------------------------------*/

#include "common.h"     
#include "grad.h"       
#include "tx.h"         
#include "rx.h"         
#include "mainctrl.h"   

double noEchoes = 1.0;                         
double noScans  = 256.0;  
double noAverages = 1.0;                     
double noSliceBlock = 1.0; //总层数。
double noViewBlock = 1.0;//相位编码的平均次数。 
double SliceBlock = 1.0;//最内层的循环，其他条件均不变的平均次数。 
double BatchSlices = 1.0;//每个TR内的层数。
double NumPs = 0;//预饱和循环次数。若等于0，则无预饱和。
double noDisacq = 0.0;
double noSamples =256.0; 
double samplePeriod=30.0; 
double effectiveEcho = 1.0; 
double fovPhase = 250.0;
double fovRead  = 250.0;
double TR = 200.0;//ms        
double TE = 16000.0;//us
double partialFreqSampling = 0.0;

double flow_comp_on = 0;//0:不开FC；1:GR开FC；2:GS开FC；3:GR和GS开FC；

int rf_Shape_NO =0;    
int rfps_Shape_NO =0;                      
double tsel90 =2560.0; //us 
double tselps = 500.0;
double rf90Bandwidth = 960.0;               
double rf90Scale=12.5;    
double rfpsScale=12.5; 
double gradWavePoint = 500.0;             
double gradSamplePeriod = 1.0;//us                
double rxGain = 0.0;//db                  
double tx_freq_offset_data = 0.0;//KHZ    
double tx_ph_offset_data = 0.0;//0??                      
double rx_freq_offset_data = 0.0;//KHZ    
double rx_ph_offset_data = 0.0;//0?? 
double preDiscard = 2.0;

double gradMatrixSel = 2;
double sepeceSliceTime = 40000.0; // TR/noSliceBlock > sepeceSliceTime >TE * noEchos 

double UnifiedTDelay = 50.0;//Unified time delay(US)
double tGsr = 1030;//1000;
double tGrr = 1374;//4000;
double tGp = 1200;
double tGpr = 1200; 
double tRFlowCom = 2000;
double tSflowcom = 2000;  
double tbefPs = 2;
double tbef90 = 0;//2;
double tSpoilPsS = 5;
double tSpoilPs = 5;
double tGspoil = 5;
double tSpoilS = 5;
 

int ps_matrix_base = 0;
double MAX_SPOIL = 160;

//Gain
//GS
double Gps = 100.0;
double Gs90 = 146;//145.0;
double Gsr = 146;//100.0;
double Gsfc = 100.0;
double Gspoil = 100.0;
//GR
double GspoilPs = 100.0;
double Gr = 133.0;
double Grr = 282;//133.0;
double Grfc = 100.0;
//GP
double deltaGp = 1.0;
double deltaGpr = 1.0;

double gp_on = 1;
double grsp_on = 1;
double rfsp_on = 1;
             
void main()
{
   double MainctrlTrigger_Ave_cnt;
   double MainctrlTrigger_scan_cnt;
   double slice_batch_start;
   
   MainctrlTrigger_Ave_cnt = 0.0;
   averages_loop:
   slice_batch_start = 0;
        
   slice_batch_loop:
//disacq_cnt = 0;  
   MainctrlTrigger_scan_cnt = 0;      
   phase_encode_loop: 
   GenerateTrigger(); 
   TimerCmp(TR,MS); 
   MainctrlTrigger_scan_cnt = MainctrlTrigger_scan_cnt + 1.0;  
   if(MainctrlTrigger_scan_cnt < noScans)
      goto phase_encode_loop;
         
   slice_batch_start = slice_batch_start + BatchSlices;
   if (slice_batch_start < noSliceBlock)          
      goto slice_batch_loop;
    
   MainctrlTrigger_Ave_cnt = MainctrlTrigger_Ave_cnt + 1.0;    
   if(MainctrlTrigger_Ave_cnt < noAverages)
      goto averages_loop;
   Lend:
   end;

   gradS:
   {
      double trampTime;
      double fixDelayTime;
      double delayTime1;
      double delayTime2;
      double delaySpoil;
      double delay1;
      double gs_var;
      double ps_cnt;
      int waveSel1_1;
      int waveSel1_2;
      int waveSel1_3;
      int waveSel1_4;
      int waveSel1_5;
      int waveSel1_6;
      int gs_matrix_sel;
      double tps;
      double aftersample;
      double afterTacq;
      double Delay_ps;
      double view_av = 0;
      double view_av_tmp = 0;
      double disacq_cnt = 0;
      double disacq_cnt_tmp = 0;
      double current_slice = 0;
      double slice_av = 0;
      double slice_batch_tmp = 0;
      double current_slice_tmp = 0;
      double phase_encode_cnt = 0;
      double current_batch_slice = 0;
        
      //梯度爬升时间
      trampTime = gradWavePoint * gradSamplePeriod;
      fixDelayTime = UnifiedTDelay;

      if (tSpoilPs > tSpoilPsS)
         tps = trampTime*3.0 + tselps + tbefPs + tSpoilS + tSpoilPs;
      else
         tps = trampTime*3.0 + tselps + tbefPs + tSpoilS + tSpoilPsS;
        
      aftersample = preDiscard + (noSamples + partialFreqSampling)*0.5;//aftersample+noPreEffSample=noSamples+preDiscard
      afterTacq = AcquireDuration(samplePeriod,aftersample);
         
      delaySpoil = tbef90 + trampTime + tsel90*0.5 + TE + afterTacq;
	   
      waveSel1_1 = 0;
      waveSel1_2 = 1;
      waveSel1_3 = 2;
      waveSel1_4 = 3;
      waveSel1_5 = 4;
      waveSel1_6 = 5;

      averages_loop://最外层循环
      //等待触发信号      
      WaitTrigger(); 
      current_batch_slice =current_batch_slice + GradEnScanCnt( noScans) * BatchSlices;// batch_slices; 
        if(current_batch_slice < noSliceBlock)
          current_batch_slice = current_batch_slice ;
        else
          current_batch_slice = 0;
      view_av = 0;
      view_av_tmp = 0;  
        
      view_block_loop:
      disacq_cnt_tmp = 0; 
      
      discard_loop:
      current_slice = current_batch_slice;
        
      multislice_loop:
      slice_av = 0;
      gs_matrix_sel = 0;
      
      slice_block_loop:
      delay1 = fixDelayTime + sepeceSliceTime*current_slice_tmp*SliceBlock + sepeceSliceTime*disacq_cnt_tmp*BatchSlices*SliceBlock + sepeceSliceTime*view_av_tmp*BatchSlices*SliceBlock;
 
      ps_cnt = 0;
      
      if(NumPs > 0)
      {
         multips_loop://预饱和循环
         Delay_ps = tps*ps_cnt + delay1;
         TimerCmp(Delay_ps,US); 
         GradMatSel(ps_matrix_base + ps_cnt);
         //-------奇数个爬升坡，调用底层代码
         GradScaleReg(Gps);
         GradWaveTable(waveSel1_1);//选择第一段波形
         GradStartnew(trampTime,tselps+tbefPs);//开始发射第一段波形
         GradWaveTable(waveSel1_5);//选择第二段波形
         GradStartnew(trampTime,tSpoilPsS);//开始发射第二段波形
         GradScaleReg(Gps);
         GradWaveTable(waveSel1_4);//选择第三段波形
         GradStartnew(trampTime,0);//开始发射第三段波形
         
//         TrapezoidTwoFixTrampTimeStart( waveSel1_1,waveSel1_1,waveSel1_2,waveSel1_2,\
//                                          tselps, tSpoilPsS, 0.0, trampTime, Gps, Gps);	
         ps_cnt = ps_cnt + 1;
         if(ps_cnt < NumPs)   
            goto  multips_loop;                  
      }
      
      delayTime1 = tps*NumPs + sepeceSliceTime*slice_av + delay1; 		
      TimerCmp(delayTime1,US);	
      GradMatSel(gradMatrixSel);
      if(flow_comp_on == 0)//( (flow_comp_on==0)|(flow_comp_on==1) )//GS不开启FC
         TrapezoidTwoFixTrampTimeStart( waveSel1_1, waveSel1_2, waveSel1_2, waveSel1_1,\
                                           tsel90, 0.0, tGsr, trampTime, Gs90, Gsr); 

      else if (flow_comp_on == 1)
         TrapezoidTwoFixTrampTimeStart( waveSel1_1, waveSel1_2, waveSel1_2, waveSel1_1,\
                                           tsel90, 0.0, tGsr, trampTime, Gs90, Gsr); 

      else if (flow_comp_on == 2)
         TrapezoidThreeFixTrampTimeStart( waveSel1_1, waveSel1_2, waveSel1_2, waveSel1_1, waveSel1_1, waveSel1_2,\
                                             tsel90, 0.0, tGsr, 0.0, tSflowcom, trampTime, Gs90, Gsr, Gsfc);
      else
         TrapezoidThreeFixTrampTimeStart( waveSel1_1, waveSel1_2, waveSel1_2, waveSel1_1, waveSel1_1, waveSel1_2,\
                                             tsel90, 0.0, tGsr, 0.0, tSflowcom, trampTime, Gs90, Gsr, Gsfc);	

      
      delayTime2 = tps*NumPs + delaySpoil + delay1; 
      TimerCmp(delayTime2,US); 
      TrapezoidOneFixTrampTimeStart( waveSel1_2, waveSel1_1, tGspoil, trampTime, Gspoil*grsp_on);
   
      slice_av = slice_av + 1;                                                                                    
      if( slice_av < SliceBlock )                    
         goto slice_block_loop;//最内层的循环，其他条件均不变的平均次数。

      current_slice_tmp = current_slice_tmp + 1;
      if(current_slice_tmp == BatchSlices)
         current_slice_tmp = 0;
      current_slice = current_slice + 1;
      if (current_slice < current_batch_slice + BatchSlices)                  
         goto multislice_loop;//当前TR下的层数累计。
         
      disacq_cnt = disacq_cnt + 1;
      disacq_cnt_tmp = disacq_cnt_tmp + 1;
      if ( disacq_cnt_tmp == noDisacq )
         disacq_cnt_tmp = noDisacq;
      
      if ( disacq_cnt <= noDisacq )
         goto discard_loop;
		     
      view_av = view_av + SliceBlock;
      view_av_tmp = view_av_tmp + 1;//时间间隔使用。
      if (view_av < noViewBlock)  //相位编码的平均次数                     
         goto view_block_loop;
      else
         view_av_tmp = view_av_tmp;

      phase_encode_cnt = phase_encode_cnt + 1;//在此模块内记录当前TR数。
      if(phase_encode_cnt == noScans)
      {
         slice_batch_tmp = slice_batch_tmp + BatchSlices;
         disacq_cnt = 0;
         disacq_cnt_tmp = 0;
      }
   
      goto averages_loop;
   }
       
   gradR:
   {     
      double trampTime;
      double fixDelayTime;
      double t_comp;
      double delayTime1; 
      double delay1;		
      double delayFCon; 
      double delayFCoff;
      double gr_var;
      double gr_comp;	
      double preTacq;
      double tacq;
      double totalsample;
      double noPreEffSample;
      double ps_cnt;
      int waveSel1_1;
      int waveSel1_2;
      int waveSel1_3;
      int waveSel1_4;
      int waveSel1_5;
      double Delay_ps;
      double tps;
      double view_av = 0;
      double view_av_tmp = 0;
      double disacq_cnt = 0;
      double disacq_cnt_tmp = 0;
      double current_slice = 0;
      double slice_av = 0;
      double slice_batch_tmp = 0;
      double current_slice_tmp = 0;
      double phase_encode_cnt = 0;
      double current_batch_slice = 0;

      //梯度爬升时间
      trampTime = gradWavePoint * gradSamplePeriod;
      fixDelayTime = UnifiedTDelay;
		
      noPreEffSample = (noSamples - partialFreqSampling)*0.5 ;
      preTacq = AcquireDuration(samplePeriod,noPreEffSample);
      totalsample = preDiscard +  noSamples;
      tacq = AcquireDuration(samplePeriod,totalsample);
      if (tSpoilPs > tSpoilPsS)
         tps = trampTime*3.0 + tselps + tbefPs + tSpoilS + tSpoilPs;
      else
         tps = trampTime*3.0 + tselps + tbefPs + tSpoilS + tSpoilPsS;
      delayFCoff = tbef90 + tsel90*0.5 + TE - preTacq - trampTime*2.0 - tGrr;
      delayFCon = tbef90 + tsel90*0.5 + TE - preTacq - trampTime*4.0 - tGrr - tRFlowCom;

      waveSel1_1 = 0;
      waveSel1_2 = 1;
      waveSel1_3 = 2;
      waveSel1_4 = 3;
      waveSel1_5 = 4;

      averages_loop:
      //等待触发信号      
      WaitTrigger(); 
      current_batch_slice =current_batch_slice + GradEnScanCnt( noScans) * BatchSlices;// batch_slices; 
        if(current_batch_slice < noSliceBlock)
          current_batch_slice = current_batch_slice ;
        else
          current_batch_slice = 0;
      view_av = 0; 
      view_av_tmp = 0;  
        
      view_block_loop:
      disacq_cnt_tmp = 0;  
      
      discard_loop:
      current_slice = current_batch_slice; 
        
      multislice_loop:
      slice_av = 0;
        
      slice_block_loop:
       delay1 = fixDelayTime + sepeceSliceTime*slice_av + sepeceSliceTime*current_slice_tmp*SliceBlock + sepeceSliceTime*disacq_cnt_tmp*BatchSlices*SliceBlock + sepeceSliceTime*view_av_tmp*BatchSlices*SliceBlock;
    
      ps_cnt = 0;  
         
      if(NumPs > 0)
      {
         multips_loop://预饱和循环
         Delay_ps = trampTime + tselps + tSpoilS + tbefPs + tps*ps_cnt + delay1;
         TimerCmp(Delay_ps,US); 
         TrapezoidOneFixTrampTimeStart( waveSel1_1, waveSel1_2, tSpoilPsS, trampTime, GspoilPs);
            
         ps_cnt = ps_cnt + 1;
         if(ps_cnt < NumPs)   
            goto  multips_loop;                  
      }
         
      if(flow_comp_on == 0)//( (flow_comp_on==0)|(flow_comp_on==2) )//GR不开启FC
      {
         delayTime1 = tps*NumPs + delayFCoff + delay1;
         TimerCmp(delayTime1,US);
         GradScaleReg(Grr);
         GradWaveTable(waveSel1_2);//选择第一段波形
         GradStartnew(trampTime,tGrr);//开始发射第一段波形
         GradWaveTable(waveSel1_1);//选择第二段波形
         GradStartnew(trampTime,0.0);//开始发射第二段波形

         GradScaleReg(Gr);
         GradWaveTable(waveSel1_1);//选择第5段波形
         GradStartnew(trampTime,tacq);//开始发射第5段波形
         GradWaveTable(waveSel1_5);//选择第二6段波形
         GradStartnew(trampTime,tGspoil);//开始发射第6段波形
         GradScaleReg(Gr);
         GradWaveTable(waveSel1_4);//选择第7段波形
         GradStartnew(trampTime,0);//开始发射第7段波形
      //   TrapezoidThreeFixTrampTimeStart( waveSel1_2, waveSel1_1, waveSel1_1, waveSel1_1, waveSel1_2, waveSel1_2,\
      //                                       tGrr, 0.0, tacq, tGspoil, 0.0, trampTime, Grr, Gr, Gr);	
      }
      else if (flow_comp_on == 1)
      {
         delayTime1 = tps*NumPs + delayFCon + delay1;
         TimerCmp(delayTime1,US);
         //四段波形，直接用底层描述
         GradScaleReg(Grfc);
         GradWaveTable(waveSel1_1);//选择第一段波形
         GradStartnew(trampTime,tRFlowCom);//开始发射第一段波形
         GradWaveTable(waveSel1_2);//选择第二段波形
         GradStartnew(trampTime,0.0);//开始发射第二段波形
         GradScaleReg(Grr);
         GradWaveTable(waveSel1_2);//选择第三段波形
         GradStartnew(trampTime,tGrr);//开始发射第三段波形
         GradWaveTable(waveSel1_1);//选择第四段波形
         GradStartnew(trampTime,0);//开始发射第四段波形

         GradScaleReg(Gr);
         GradWaveTable(waveSel1_1);//选择第5段波形
         GradStartnew(trampTime,tacq);//开始发射第5段波形
         GradWaveTable(waveSel1_5);//选择第二6段波形
         GradStartnew(trampTime,tGspoil);//开始发射第6段波形
         GradScaleReg(Gr);
         GradWaveTable(waveSel1_4);//选择第7段波形
         GradStartnew(trampTime,0);//开始发射第7段波形

         //-------------------------
//         TrapezoidTwoFixTrampTimeStart( waveSel1_1, waveSel1_2, waveSel1_2, waveSel1_1,\
//                                            tRFlowCom, 0.0, tGrr, trampTime, Grfc, Grr);
//         TrapezoidTwoFixTrampTimeStart( waveSel1_1, waveSel1_1, waveSel1_2, waveSel1_2,\
//                                            tacq, tGspoil, 0.0, trampTime, Gr, Gr);
      }
      else if (flow_comp_on == 2)
      {
         delayTime1 = tps*NumPs + delayFCoff + delay1;
         TimerCmp(delayTime1,US);
         GradScaleReg(Grr);
         GradWaveTable(waveSel1_2);//选择第一段波形
         GradStartnew(trampTime,tGrr);//开始发射第一段波形
         GradWaveTable(waveSel1_1);//选择第二段波形
         GradStartnew(trampTime,0.0);//开始发射第二段波形

         GradScaleReg(Gr);
         GradWaveTable(waveSel1_1);//选择第5段波形
         GradStartnew(trampTime,tacq);//开始发射第5段波形
         GradWaveTable(waveSel1_5);//选择第二6段波形
         GradStartnew(trampTime,tGspoil);//开始发射第6段波形
         GradScaleReg(Gr);
         GradWaveTable(waveSel1_4);//选择第7段波形
         GradStartnew(trampTime,0);//开始发射第7段波形
    //     TrapezoidThreeFixTrampTimeStart( waveSel1_2, waveSel1_1, waveSel1_1, waveSel1_1, waveSel1_2, waveSel1_2,\
    //                                         tGrr, 0.0, tacq, tGspoil, 0.0, trampTime, Grr, Gr, Gr);   
      }
      else
      {
         delayTime1 = tps*NumPs + delayFCon + delay1;
         TimerCmp(delayTime1,US);
         GradScaleReg(Grfc);
         GradWaveTable(waveSel1_1);//选择第一段波形
         GradStartnew(trampTime,tRFlowCom);//开始发射第一段波形
         GradWaveTable(waveSel1_2);//选择第二段波形
         GradStartnew(trampTime,0.0);//开始发射第二段波形
         GradScaleReg(Grr);
         GradWaveTable(waveSel1_2);//选择第三段波形
         GradStartnew(trampTime,tGrr);//开始发射第三段波形
         GradWaveTable(waveSel1_1);//选择第四段波形
         GradStartnew(trampTime,0);//开始发射第四段波形

         GradScaleReg(Gr);
         GradWaveTable(waveSel1_1);//选择第5段波形
         GradStartnew(trampTime,tacq);//开始发射第5段波形
         GradWaveTable(waveSel1_5);//选择第二6段波形
         GradStartnew(trampTime,tGspoil);//开始发射第6段波形
         GradScaleReg(Gr);
         GradWaveTable(waveSel1_4);//选择第7段波形
         GradStartnew(trampTime,0);//开始发射第7段波形
     //    TrapezoidTwoFixTrampTimeStart( waveSel1_1, waveSel1_2, waveSel1_2, waveSel1_1,\
     //                                       tRFlowCom, 0.0, tGrr, trampTime, Grfc, Grr);
      //   TrapezoidTwoFixTrampTimeStart( waveSel1_1, waveSel1_1, waveSel1_2, waveSel1_2,\
     //                                       tacq, tGspoil, 0.0, trampTime, Gr, Gr);
      }
         
      slice_av = slice_av + 1;                                                                                    
      if( slice_av < SliceBlock )                    
         goto slice_block_loop;//最内层的循环，其他条件均不变的平均次数。
         
      current_slice_tmp = current_slice_tmp + 1;
      if(current_slice_tmp == BatchSlices)
         current_slice_tmp = 0;
         
      current_slice = current_slice + 1;
      if (current_slice < current_batch_slice + BatchSlices)                  
         goto multislice_loop;//当前TR下的层数累计。
         
      disacq_cnt = disacq_cnt + 1;
      disacq_cnt_tmp = disacq_cnt_tmp + 1;
      if ( disacq_cnt_tmp == noDisacq )
         disacq_cnt_tmp = noDisacq;
         
      if ( disacq_cnt <= noDisacq )
         goto discard_loop;
           
      view_av = view_av + SliceBlock;
      view_av_tmp = view_av_tmp + 1;//时间间隔使用。
      if (view_av < noViewBlock)  //相位编码的平均次数                     
         goto view_block_loop;
      else
         view_av_tmp = view_av_tmp;

      phase_encode_cnt = phase_encode_cnt + 1;//在此模块内记录当前TR数。
      if(phase_encode_cnt == noScans)
      {
         slice_batch_tmp = slice_batch_tmp + BatchSlices;
         disacq_cnt = 0;
         disacq_cnt_tmp = 0;
      }

      goto averages_loop;
   }

   gradP:
   {
      double trampTime;
      double fixDelayTime;
      double holdTime1;
      double delayTime1;
      double delayTime2;
      double delaySpoil;
      double delayGp;
      double delay1;
      double ps_cnt;
      double gp_var;
      double gp_var_rescale;
      double noPreEffSample;
      double preTacq;
      double aftersample;
      double afterTacq;
      double dummyShotEnout;
      double echoBlockCnt = 0.0;
      int waveSel1_1;
      int waveSel1_2;
      double Delay_ps;
      double scaleRamGpAddr = 0;
      double scaleRamGprAddr = 0;
      double tps;
      double view_av = 0;
      double view_av_tmp = 0;
      double disacq_cnt = 0;
      double disacq_cnt_tmp = 0;
      double current_slice = 0;
      double slice_av = 0;
      double slice_batch_tmp = 0;
      double current_slice_tmp = 0;
      double phase_encode_cnt = 0;
      double tmpGp;
      double tmpGpr;
      double current_batch_slice = 0;
      
      //梯度爬升时间
      trampTime = gradWavePoint * gradSamplePeriod;
      fixDelayTime = UnifiedTDelay;
      noPreEffSample = (noSamples - partialFreqSampling)*0.5 ;
      preTacq = AcquireDuration(samplePeriod,noPreEffSample);
      aftersample = preDiscard + (noSamples + partialFreqSampling)*0.5;//aftersample+noPreEffSample=noSamples+preDiscard
      afterTacq = AcquireDuration(samplePeriod,aftersample);
      
      if (tSpoilPs > tSpoilPsS)
         tps = trampTime*3.0 + tselps + tbefPs + tSpoilS + tSpoilPs;
      else
         tps = trampTime*3.0 + tselps + tbefPs + tSpoilS + tSpoilPsS;
      delaySpoil = tbef90 + trampTime + tsel90*0.5 + TE + afterTacq;
      delayGp = tbef90 + trampTime*2.0 + tsel90;     
      

      waveSel1_1 = 0;
      waveSel1_2 = 1;  
      scaleRamGpAddr = 0;
      scaleRamGprAddr = 0;
      averages_loop:
      
      //等待触发信号      
      WaitTrigger(); 
      current_batch_slice =current_batch_slice + GradEnScanCnt( noScans) * BatchSlices;// batch_slices; 
        if(current_batch_slice < noSliceBlock)
          current_batch_slice = current_batch_slice ;
        else
          current_batch_slice = 0;
      view_av = 0;
      view_av_tmp = 0;   
           
      view_block_loop:
      disacq_cnt_tmp = 0; 
  
      discard_loop:
      current_slice = current_batch_slice;  
        
      multislice_loop:
      slice_av = 0;
        
      slice_block_loop:
      delay1 = fixDelayTime + sepeceSliceTime*slice_av + sepeceSliceTime*current_slice_tmp*SliceBlock + sepeceSliceTime*disacq_cnt_tmp*BatchSlices*SliceBlock + sepeceSliceTime*view_av_tmp*BatchSlices*SliceBlock;
  
      ps_cnt = 0;  
         
      if(NumPs > 0)
      {
         multips_loop://预饱和循环
         Delay_ps =  trampTime + tSpoilS + tselps + tps*ps_cnt + delay1;
         TimerCmp(Delay_ps,US); 
         TrapezoidOneFixTrampTimeStart( waveSel1_1, waveSel1_2, tSpoilPsS, trampTime, GspoilPs);

         ps_cnt = ps_cnt + 1;
         if(ps_cnt < NumPs)   
            goto  multips_loop;                  
      }
      

      //---------------查表---------
      delayTime1 = tps*NumPs + delayGp + delay1;
      TimerCmp(delayTime1,US); 
      if(gp_on == 1)
       TrapelutzoidOneFixTrampTimeStart( waveSel1_1, waveSel1_2, tGp, trampTime, scaleRamGpAddr);
      else
       TrapezoidOneFixTrampTimeStart( waveSel1_1, waveSel1_2, tGp, trampTime, 0);

      
      delayTime2 = tps*NumPs + delaySpoil + delay1;
      TimerCmp(delayTime2,US); 
      if(gp_on == 1)
         TrapelutzoidOneFixTrampTimeStart( waveSel1_2, waveSel1_1, tGpr, trampTime, scaleRamGprAddr);
      else
         TrapezoidOneFixTrampTimeStart( waveSel1_2, waveSel1_1, tGpr, trampTime, 0);
         
      slice_av = slice_av + 1;                                                                                    
      if( slice_av < SliceBlock )                    
         goto slice_block_loop;//最内层的循环，其他条件均不变的平均次数。

      current_slice_tmp = current_slice_tmp + 1;
      if(current_slice_tmp == BatchSlices)
         current_slice_tmp = 0;
         
      current_slice = current_slice + 1;
      if (current_slice < current_batch_slice + BatchSlices)                  
         goto multislice_loop;//当前TR下的层数累计。
         
      disacq_cnt = disacq_cnt + 1;
      disacq_cnt_tmp = disacq_cnt_tmp + 1;
      if ( disacq_cnt_tmp == noDisacq )
         disacq_cnt_tmp = noDisacq;
         
      if ( disacq_cnt <= noDisacq )
         goto discard_loop;
           
      view_av = view_av + SliceBlock;
      view_av_tmp = view_av_tmp + 1;//时间间隔使用。
      if (view_av < noViewBlock)  //相位编码的平均次数                     
         goto view_block_loop;
      else
         view_av_tmp = view_av_tmp;

      phase_encode_cnt = phase_encode_cnt + 1;//在此模块内记录当前TR数。
      scaleRamGpAddr = scaleRamGpAddr + 1;//相位增益查表地址。
      scaleRamGprAddr = scaleRamGprAddr + 1; 
      if(phase_encode_cnt == noScans)
      {
         slice_batch_tmp = slice_batch_tmp + BatchSlices;
         scaleRamGpAddr = 0;
         scaleRamGprAddr = 0;
         disacq_cnt = 0;
         disacq_cnt_tmp = 0;
      }

      goto averages_loop;
   }  
 
   tx1:
   {
      double trampTime;
      double fixDelayTime;
      double delayTime_rf90;
      double delay1;
      double ps_cnt = 0.0;
      double ttxgatepost = 10.0;                
      double ttxgatepre = 10.0;
      double Delay_ps; 
      double noSlice=0.0;  
      double tps;
      double view_av = 0;
      double view_av_tmp = 0;
      double disacq_cnt = 0;
      double disacq_cnt_tmp = 0;
      double current_slice = 0;
      double slice_av = 0;
      double slice_batch_tmp = 0;
      double current_slice_tmp = 0;
      double phase_encode_cnt = 0;  
      double RfSpoilCnt = 0;
      double current_batch_slice = 0;
      
      trampTime = gradWavePoint * gradSamplePeriod;
      fixDelayTime = UnifiedTDelay;
      if (tSpoilPs > tSpoilPsS)
         tps = trampTime*3.0 + tselps + tbefPs + tSpoilS + tSpoilPs;
      else
         tps = trampTime*3.0 + tselps + tbefPs + tSpoilS + tSpoilPsS;
      
      tx_start:
      TxFirReset();       
      //等待触发信号      
      WaitTrigger(); 
      current_batch_slice =current_batch_slice + GradEnScanCnt( noScans) * BatchSlices;// batch_slices; 
        if(current_batch_slice < noSliceBlock)
          current_batch_slice = current_batch_slice ;
        else
          current_batch_slice = 0;
      view_av = 0; 
      view_av_tmp = 0;  
        
      view_block_loop:
      disacq_cnt_tmp = 0;       
      discard_loop:
      current_slice = current_batch_slice;  
        
      multislice_loop:
      slice_av = 0;
        
      slice_block_loop:
      delay1 = fixDelayTime + sepeceSliceTime*slice_av + sepeceSliceTime*current_slice_tmp*SliceBlock + sepeceSliceTime*disacq_cnt_tmp*BatchSlices*SliceBlock + sepeceSliceTime*view_av_tmp*BatchSlices*SliceBlock;
       
      ps_cnt = 0;  
         
      if(NumPs > 0)
      {
         TxChannelShapeSel(CHANNEL1,rfps_Shape_NO);
         multips_loop://预饱和循环
         Delay_ps = trampTime + tps*ps_cnt + delay1;
     //    TxPhaseOffsetRam(CHANNEL1, RfSpoilCnt);
         if(rfsp_on==1)
           TxPhaseOffsetRam(CHANNEL1,RfSpoilCnt); 
         else
           TxPhaseOffsetReg(CHANNEL1,tx_ph_offset_data);
         TxFreqOffsetRam(CHANNEL1,current_slice); 
         TxAttReg(CHANNEL1, rfpsScale);//ch,att db 
         TimerCmp(Delay_ps,US);
         TxStart(CHANNEL1, tselps, ttxgatepre, ttxgatepost);
            
         ps_cnt = ps_cnt + 1;
            
         if(ps_cnt < NumPs)   
            goto  multips_loop;                  
      }

      RfSpoilCnt = RfSpoilCnt +1;
      if(RfSpoilCnt >= MAX_SPOIL)
         RfSpoilCnt = 0;
         
      TxChannelShapeSel(CHANNEL1,rf_Shape_NO);
      //配置90度射频波形的幅度
      TxAttReg(CHANNEL1,rf90Scale);//ch,att db 
      //发射90度射频波形
      delayTime_rf90 = tps*NumPs + tbef90 + trampTime + delay1;
      TimerCmp(delayTime_rf90,US);
      TxStart(CHANNEL1, tsel90, ttxgatepre, ttxgatepost);

      slice_av = slice_av + 1;                                                                                    
      if( slice_av < SliceBlock )                    
         goto slice_block_loop;//最内层的循环，其他条件均不变的平均次数。

      current_slice_tmp = current_slice_tmp + 1;
      if(current_slice_tmp == BatchSlices)
         current_slice_tmp = 0;
       
      current_slice = current_slice + 1;
      if (current_slice < current_batch_slice + BatchSlices)                  
         goto multislice_loop;//当前TR下的层数累计。
         
      disacq_cnt = disacq_cnt + 1;
      disacq_cnt_tmp = disacq_cnt_tmp + 1;
      if ( disacq_cnt_tmp == noDisacq )
         disacq_cnt_tmp = noDisacq;
         
      if ( disacq_cnt <= noDisacq )
         goto discard_loop;
             
      view_av = view_av + SliceBlock;
      view_av_tmp = view_av_tmp + 1;//时间间隔使用。
      if (view_av < noViewBlock)  //相位编码的平均次数                     
         goto view_block_loop;
      else
         view_av_tmp = view_av_tmp;
         

      phase_encode_cnt = phase_encode_cnt + 1;//在此模块内记录当前TR数。
      if(phase_encode_cnt == noScans)
      {
         slice_batch_tmp = slice_batch_tmp + BatchSlices;
         disacq_cnt = 0;
         disacq_cnt_tmp = 0;
      }
    
      goto tx_start;
   }

   rx1:
   {
      double trampTime;
      double fixDelayTime;
      double sample_period;
      double delayTime1;
      double delay1;
      double sample_total;
      double preTacq;
      double noPreEffSample;
      double trxgatepre = 10.0;                 
      double trxgatepost = 10.0;   
      double tps;
      double view_av = 0;
      double view_av_tmp = 0;
      double disacq_cnt = 0;
      double disacq_cnt_tmp = 0;
      double current_slice = 0;
      double slice_av = 0;
      double slice_batch_tmp = 0;
      double current_slice_tmp = 0;
      double phase_encode_cnt = 0;
      double current_batch_slice = 0;
      double echoes;
      
      rx_start:
      //配置通道1-4的频率和相位偏移
      RxFreqOffsetReg(CHANNEL1,rx_freq_offset_data,KHZ);
      RxPhaseOffsetReg(CHANNEL1,rx_ph_offset_data);       
      RxFreqOffsetReg(CHANNEL2,rx_freq_offset_data,KHZ);
      RxPhaseOffsetReg(CHANNEL2,rx_ph_offset_data);     
      RxFreqOffsetReg(CHANNEL3,rx_freq_offset_data,KHZ);
      RxPhaseOffsetReg(CHANNEL3,rx_ph_offset_data);     
      RxFreqOffsetReg(CHANNEL4,rx_freq_offset_data,KHZ);
      RxPhaseOffsetReg(CHANNEL4,rx_ph_offset_data);  
      //回波的采样点数
      sample_total =preDiscard + noSamples;
      //回波的采样时间
      sample_period=RxChannelAcquirePara(samplePeriod,sample_total);
      //配置通道1-4的增益
      RxGainReg(CHANNEL1,rxGain);  //ch, db att  
      RxGainReg(CHANNEL2,rxGain);  //ch, db att  
      RxGainReg(CHANNEL3,rxGain);  //ch, db att  
      RxGainReg(CHANNEL4,rxGain);  //ch, db att  
      //梯度爬升时间 
      trampTime = gradWavePoint * gradSamplePeriod;
      fixDelayTime = TX_FILTER_DELAY - trxgatepre + UnifiedTDelay;
      if (tSpoilPs > tSpoilPsS)
         tps = trampTime*3.0 + tselps + tbefPs + tSpoilS + tSpoilPs;
      else
         tps = trampTime*3.0 + tselps + tbefPs + tSpoilS + tSpoilPsS;
      noPreEffSample = (noSamples - partialFreqSampling)*0.5;
      preTacq = AcquireDuration(samplePeriod,noPreEffSample);

      //等待触发信号      
      WaitTrigger(); 
      current_batch_slice =current_batch_slice + GradEnScanCnt( noScans) * BatchSlices;// batch_slices; 
        if(current_batch_slice < noSliceBlock)
          current_batch_slice = current_batch_slice ;
        else
          current_batch_slice = 0;
      view_av = 0;
      view_av_tmp = 0;  
        
      view_block_loop:
      disacq_cnt_tmp = 0; 
      discard_loop:
      current_slice = current_batch_slice;  
        
      multislice_loop:
      slice_av = 0;

      //多层循环结构
      slice_block_loop:
      delay1 = fixDelayTime + sepeceSliceTime*slice_av + sepeceSliceTime*current_slice_tmp*SliceBlock + sepeceSliceTime*disacq_cnt_tmp*BatchSlices*SliceBlock + sepeceSliceTime*view_av_tmp*BatchSlices*SliceBlock;
        
      //开始采集数据
      delayTime1 = tps*NumPs + tbef90 + trampTime + tsel90*0.5 + TE - preTacq + delay1;	
      TimerCmp(delayTime1,US);
      if(disacq_cnt < noDisacq){
        	RxStart(0,trxgatepre,trxgatepost,sample_period);
      }else{
        	RxStart(15,trxgatepre,trxgatepost,sample_period);
      }
      
      echoes = noEchoes;

      slice_av = slice_av + 1;                                                                                    
      if( slice_av < SliceBlock )                    
         goto slice_block_loop;//最内层的循环，其他条件均不变的平均次数。

      current_slice_tmp = current_slice_tmp + 1;
      if(current_slice_tmp == BatchSlices)
         current_slice_tmp = 0;
         
      current_slice = current_slice + 1;
      if (current_slice < current_batch_slice + BatchSlices)                  
         goto multislice_loop;//当前TR下的层数累计。
         
      disacq_cnt = disacq_cnt + 1;
      disacq_cnt_tmp = disacq_cnt_tmp + 1;
      if ( disacq_cnt_tmp == noDisacq )
         disacq_cnt_tmp = noDisacq;
         
      if ( disacq_cnt <= noDisacq )
         goto discard_loop;
           
      view_av = view_av + SliceBlock;
      view_av_tmp = view_av_tmp + 1;//时间间隔使用。
      if (view_av < noViewBlock)  //相位编码的平均次数                     
         goto view_block_loop;
      else
         view_av_tmp = view_av_tmp;

      phase_encode_cnt = phase_encode_cnt + 1;//在此模块内记录当前TR数。
      if(phase_encode_cnt == noScans)
      {
         slice_batch_tmp = slice_batch_tmp + BatchSlices;
         disacq_cnt = 0;
         disacq_cnt_tmp = 0;
      }
         
      goto rx_start;
   }

}
      