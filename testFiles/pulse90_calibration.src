/*-------------------------------------------------------------------------------------------------
(C) COPYRIGHT 2016 FIRSTECH Co., Ltd. ALL RIGHTS RESERVED
This software and the associated documentation are confidential and proprietary to Firstech Co., Ltd. 
Project name     :    MRI                                         
File name        :    pulse90_calibration.src                                            
Author           :    firtech                                            
Contacts         :                                                
Date             :    2016.11.30                                            
File version     :                                                
Key words        :                                                
File discription :    1pluse序列代码编写，发射三个软脉冲，
                      接收采集回波和自激回波信号。需添加选层梯度信号。                                            
Modified history :                                                
Date       Author             Version          Details            
======================================================== 
        
--------------------------------------------------------------------------------------------------*/

import TX 0 11 "D:\\FT_mri_working\\firstech_lib_bak_0526\\wave\\Rect_lob3_1.333KHz_2us_1500_3000us.rfwave" Rect_lob3_1333Hz_2us_1500_3000us

#include "common.h"     
#include "grad.h"       
#include "tx.h"         
#include "rx.h"         
#include "mainctrl.h"   
/*-----------------------------------------------------
 全局变量定义，此处定义的变量序列中使用到的会在
 菲特谱仪设备管理软件的Load Runnable Config界面中
 显示。变量可以在序列或者Load Runnable Config修改
------------------------------------------------------*/
double noEchoes = 2.0;                         
double noScans  = 256.0;  
double noAverages = 1.0;                     
double noSlices = 1.0;                    
double samplePeriod=20.0;                        
double noSamples =256.0;              
int    rf_Shape_NO =11;//4;                       
int  gradWavePoint = 50; 
double gradStepLength_up = 2000;     
double gradStepLength_down = -2000;        
double gradSamplePeriod = 4.0;//us        
double TR = 3000.0;//ms        
double TE = 5000.0;//us                                                                                      
double tsel90 =3000.0; //us                
double rf90Scale=12.4;                     
double rxGain = 0.0;//db                  
double ttxgatepost = 10.0;                
double ttxgatepre = 10.0;                      
double tx_freq_offset_data = 0.0;//KHZ    
double tx_ph_offset_data = 0.0;//0??       
double trxgatepre = 10.0;                 
double trxgatepost = 10.0;                    
double rx_freq_offset_data = 0.0;//KHZ    
double rx_ph_offset_data = 0.0;//0??                             
double gradMatNo = 0;                
double Gmax = 250;// 500;
double tau1 = 10000.0; //us
double tau2= 30000.0;//us
double preDiscard = 2.0;
double UnifiedTDelay = 2;

void main()
{
    MainctrlTrigger( noAverages, noScans, TR);  //产生扫描中对应数目的trigger信号
    
/*-----------------------------------------------------
 选层梯度模块，pulse90_calibration产生一个
 从开始发射射频脉冲到采集结束的选层梯度。
------------------------------------------------------*/

    gradS:
    {
      double trampTime;
      double fix_delaytime;
      double graGain;
      double holdtime1;
      double holdtime2;
      double holdtime3;
      double holdtime4;
      double delayTime1;
      double delayTime2;
      double rep_cnt = 0.0;
      int    waveSel1_1;
      int    waveSel1_2;
      double gradsgain1;
      double gradsgain2;
      double gradsgain3;
      double tcrush;
      double AR1;
      double AR2;
      double tacq;
             
      GradMatSel(gradMatNo);                                                       //选择旋转矩阵
      trampTime = gradWavePoint ;//* gradSamplePeriod;
      fix_delaytime = UnifiedTDelay;//TX_RF_FIS_GRA_SEC_DELAY ;
      tacq=AcquireDuration(samplePeriod,noSamples);      
      holdtime1 = 3*tau1+tau2+tsel90+tacq*0.5+preDiscard;                          //计算梯度保持时间
      delayTime1 = fix_delaytime ;
      waveSel1_1 = 6;                                                              //选择梯度波形1                   
      waveSel1_2 = 7;                                                              //选择梯度波形2                   
      
      averages_loop:                                                               //平均循环结构 
      WaitTrigger(); 
      gradsgain1 = Gmax;                                                           //设置梯度增益
      TimerCmp(delayTime1 ,US);                                                    //等待delayTime1后开始施加选层梯度
      GradGainRegStart_2(gradWavePoint,gradStepLength_up,holdtime1,Gmax);   
      GradGainRegStart_2(gradWavePoint,gradStepLength_down,0,Gmax);
   //   TrapezoidOneStart(waveSel1_1,waveSel1_2,holdtime1,trampTime, trampTime,Gmax);//产生梯度波形 
      goto averages_loop;
      }
      
/*-----------------------------------------------------
 频率编码梯度模块，pulse90_calibration序列中不需要，
 为了保持代码结构一致性，添加一个空的梯度编码模块。
------------------------------------------------------*/      
      
    gradR:
    {
      double temp=1.0;
      TimerCmp(temp ,US);
      averages_loop: 
      goto averages_loop;
      
    }
    
/*-----------------------------------------------------
 相位编码梯度模块，pulse90_calibration序列中不需要，
 为了保持代码结构一致性，添加一个空的梯度编码模块。
------------------------------------------------------*/
    
    gradP:
    {
      double temp=1.0;
      TimerCmp(temp ,US);
      averages_loop: 
      goto averages_loop;
    }
    
/*-----------------------------------------------------
 射频发射脉冲模块，产生射频脉冲，配置发送脉冲的通道、
 脉冲的波形、持续时间、幅度、频偏及相偏等参数。
 pulse90_calibration序列发送三个软脉冲，并设置相关参数
------------------------------------------------------*/ 
    
    tx1:
    {
      double trampTime;
      double fix_delaytime;
      double delayTime_rf90_1; 
      double delayTime_rf90_c1; 
      double delayTime_rf90_c2;
             
      tx_start:
      TxFirReset(); 
      TxFreqOffsetReg(CHANNEL1,tx_freq_offset_data,KHZ);
      TxPhaseOffsetReg(CHANNEL1,tx_ph_offset_data);
      TxChannelShapeSel(CHANNEL1,rf_Shape_NO);
       
      trampTime = gradWavePoint * gradSamplePeriod;
      fix_delaytime = trampTime+UnifiedTDelay;        
        
      WaitTrigger();
      TxAttReg(CHANNEL1,rf90Scale); 
      delayTime_rf90_1 = fix_delaytime;                         //第一个脉冲发送时刻计算
      delayTime_rf90_c1 = delayTime_rf90_1+tau1;                //第二个脉冲发送时刻计算
      delayTime_rf90_c2 = delayTime_rf90_c1+tau1+tau2;          //第三个脉冲发送时刻计算
      TimerCmp(delayTime_rf90_1,US);                            //计数到第一个脉冲发送时刻
      TxStart(CHANNEL1,tsel90,ttxgatepre,ttxgatepost);          //开始发射第一个射频脉冲，打开射频发射门控，设置提前开启和延后关闭门控时间
      TimerCmp(delayTime_rf90_c1,US);                           //计数到第二个脉冲发送时刻
      TxStart(CHANNEL1,tsel90,ttxgatepre,ttxgatepost);          //开始发射第二个射频脉冲，打开射频发射门控，设置提前开启和延后关闭门控时间
      TimerCmp(delayTime_rf90_c2,US);                           //计数到第三个脉冲发送时刻
      TxStart(CHANNEL1,tsel90,ttxgatepre,ttxgatepost);          //开始发射第三个射频脉冲，打开射频发射门控，设置提前开启和延后关闭门控时间     
      goto tx_start;
    }

/*-----------------------------------------------------
 回波采集模块，选择采集通道、采集带宽、接收增益、
 频偏、相偏等参数设置。
 pulse90_calibration序列采集回波和自激回波，
 通过比较两个回波大小，校准90度脉冲信号。  
------------------------------------------------------*/
  
    rx1:
    {
       double trampTime;
       double fix_delaytime;
       double sample_period;
       double delayTime1; 
       double delayTime_c1; 
       double sample_total;
       double tacq;
       double rep_cnt=0.0;
     
       rx_start:
       RxFreqOffsetReg(CHANNEL1,rx_freq_offset_data,KHZ);
       RxPhaseOffsetReg(CHANNEL1,rx_ph_offset_data);
       sample_total = preDiscard +  noSamples;
       sample_period=RxChannelAcquirePara(samplePeriod,sample_total);
       tacq=AcquireDuration(samplePeriod,noSamples);
       RxGainReg(CHANNEL1,rxGain);  //ch, db att  
       trampTime = gradWavePoint * gradSamplePeriod;
       fix_delaytime = TX_FILTER_DELAY+trampTime-trxgatepre+UnifiedTDelay;
       rep_cnt=0.0;
       WaitTrigger();   
       delayTime1 =  fix_delaytime+2*tau1-tacq*0.5+tsel90*0.5;     //第一个回波采集时刻计算 
       noEchoes_loop:                                              //回波循环，要采集noEchoes个回波
         RxPhaseOffsetReg(CHANNEL1,0.0);                           //采集通道相位清零  
         TimerCmp(delayTime1,US);                                  //计数到采集时刻
         RxStart(CHANNEL1,trxgatepre,trxgatepost,sample_period);   //打开接收通道1，开始采集，设置采集门控提前开启和延后关闭时间
         delayTime1 = delayTime1+tau1+tau2;                        //第二个回波采集时刻计算
         rep_cnt = rep_cnt+1.0;
         if(rep_cnt < noEchoes)//noEchoes
       goto noEchoes_loop;           
       goto rx_start;
    }
}
