/*-------------------------------------------------------------------------------------------------
(C) COPYRIGHT 2016 FIRSTECH Co., Ltd. ALL RIGHTS RESERVED
This software and the associated documentation are confidential and proprietary to Firstech Co., Ltd. 
Project name     :    MRI                                         
File name        :    flair.src                                            
Author           :    pengjing                                            
Contacts         :                                                
Date             :    2017.1.10                                            
File version     :                                                
Key words        :                                                
File discription :    FLAIR sequence                                            
Modified history :                                                
Date       Author             Version          Details            
======================================================== 
2017.1.10    pengjing           v1.0         
--------------------------------------------------------------------------------------------------*/

#include "common.h"     
#include "grad.h"       
#include "tx.h"         
#include "rx.h"         
#include "mainctrl.h"   

double noEchoes = 7.0;                         
double noScans  = 31.0;  
double noAverages = 1.0;                     
double noSliceBlock = 5.0;                           
double noSamples =256.0; 
double samplePeriod=30.0; 
double effectiveEcho = 4.0; 
double fovPhase = 250.0;
double fovRead  = 250.0;
double TR = 2000.0;//ms        
double TE = 20000.0;//us
double T1 = 300000.0;//us
double distanceSlice1 = 0.0;
double thickSlice = 5.0;
double seperationSlice = 10.0;
double orderSlice = 1.0;
double ratioPhaseSampling = 1.0;
double ratioFreqSampling = 1.0;
double partialFreqSampling = 0.0;
double partialPhaseSampling = 0.0;
double modeAverage = 0.0;
double phaseCycle = 0.0;
double fovPhaseOffset = 0.0;
double fovReadOffset = 0.0;
double dummyShot = 0.0;
double modePhaseCode = 1.0;
double orderPhaseCode = 0.0;
double modePartialPhaseSampling = 0.0;
double UnifiedTDelay = 10.0;//Unified time delay(US)

int rf_Shape_NO =0;                       
double tsel90 =2560.0; //us 
double tsel180 =2560.0; //us  
double rf90Bandwidth = 960.0;               
double rf90Scale=12.5;      
double rf180Scale=6.5;  
double gradWavePoint = 500.0;             
double gradSamplePeriod = 1.0;//us                
double rxGain = 0.0;//db                  
double tx_freq_offset_data = 0.0;//KHZ    
double tx_ph_offset_data = 0.0;//0??                      
double rx_freq_offset_data = 0.0;//KHZ    
double rx_ph_offset_data = 0.0;//0?? 
double preDiscard = 2.0;

double tselinv = 2560.0; //us
double rfinvBandwidth = 960.0;   
double rfinvScale=6.5;  
double rfinv_ph_offset_data = 0.0;// 

double thickSliceRatioGain = 1.32;
double gradMatrixSel = 0;
double sepeceSliceTime = 160000.0; // TR/noSliceBlock > sepeceSliceTime >TE * noEchos 
double gainEffPhase = 300.0;
double ratiaFreqOversampling = 1.0;
double gradCompensation = 0.0; //the Trapezoid gain after sample
double tcrush = 1000.0;
double tref = 1500.0;

double grad_spoil_on = 1.0;
double gradSpoilAmp = 300.0;
double crushTime = 3000.0;

double dummyn1 =0.0; 
double dummyn2 =0.0; 
double dummyn3 =0.0; 
double dummyn4 =0.0; 
double dummyn5 =0.0; 
double dummyn6 =0.0; 
double dummyn7 =0.0; 
double dummyn8 =0.0; 
double dummyn9 =0.0; 
double dummyn10=0.0; 
double dummyn11=0.0; 
double dummyn12=0.0; 
double dummyn13=0.0; 
double dummyn14=0.0; 
double dummyn15=0.0; 
double dummyn16=0.0; 
double dummyn17=0.0; 
double dummyn18=0.0; 
double dummyn19=0.0; 
double dummyn20=0.0; 

double tx_ph_offset_data1 = 0.0;
double tx_ph_offset_data2 = 0.0;
double tx_ph_offset_data3 = 0.0;
double tx_ph_offset_data4 = 0.0;
double tx_ph_offset_data5 = 0.0;
double tx_ph_offset_data6 = 0.0;
double tx_ph_offset_data7 = 0.0;
double tx_ph_offset_data8 = 0.0;
           
void main()
{
    MainctrlTrigger( noAverages, noScans, TR);

    gradS:
    {

        double trampTime;
        double fixDelayTime;
        double t_comp;
        double t_refocus;
        double t_180;
		double t_inv;
        double delayTime1;
        double delayTime2;
		double delayTime_inv;
		double delayTimeSpoil;
	    double gs_var;
        double gs_comp; 
		double gs_inv;
        double rep_cnt;
		double rep_cnt1;
		double ech_cnt;
		double t1CountTime;
		double t1seCountTime;
		double tmp_cnt;
		double t1_cnt;
		double t1Count;
		double aftersample;
		double afterTacq;
        int waveSel1_1;
        int waveSel1_2;
       
        trampTime = gradWavePoint * gradSamplePeriod;
        fixDelayTime =  UnifiedTDelay;
        aftersample = preDiscard +  (noSamples + partialFreqSampling)*0.5;
        afterTacq = AcquireDuration(samplePeriod,aftersample);	   
        averages_loop: 
        GradMatSel(gradMatrixSel);
	    gs_var = GardSliceGain(rf90Bandwidth,thickSlice,thickSliceRatioGain);
		gs_inv = GardSliceGain(rfinvBandwidth,thickSlice,thickSliceRatioGain);
    	t_comp = tref;
		gs_comp = 0.5*gs_var*(tsel90+trampTime)/(t_comp+trampTime);
		t_180 = tsel180+2.0*tcrush;         
		
        waveSel1_1 = 0;
        waveSel1_2 = 1;
       
        rep_cnt = 0.0;      
        WaitTrigger(); 
        t1_cnt = 0.0;  
        rep_cnt1 = 0.0;		
		
	    T1_loop:
		t1CountTime = 0.0;
		t1Count = 0.0;
        t1_slice_loop: 
		delayTime_inv = fixDelayTime+t1CountTime+ T1*rep_cnt1+sepeceSliceTime*t1_cnt;	
		TimerCmp(delayTime_inv ,US);
        TrapezoidOneFixTrampTimeStart( waveSel1_1,waveSel1_2,tselinv,trampTime,gs_inv); 
		t1CountTime = t1CountTime+sepeceSliceTime;
		t1seCountTime = (T1*(rep_cnt1+1) + sepeceSliceTime*t1_cnt + t1CountTime)/1000.0;
		t1Count = t1Count + 1.0;
		tmp_cnt = t1Count + t1_cnt;
		if(t1seCountTime<TR)
		{
		    if(tmp_cnt<noSliceBlock)
			{
			    if(t1CountTime < T1 )
                goto t1_slice_loop;		        
			}
		}	
		
		rep_cnt = 0.0;
        fse_slice_loop:
        ech_cnt = 0.0;
        delayTime1 = fixDelayTime + sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt; 
        delayTime2 = fixDelayTime + TE*0.5 + tsel90*0.5 - tsel180*0.5  -tcrush +sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt; 
        delayTimeSpoil = fixDelayTime + tsel90*0.5 + TE*noEchoes + afterTacq  + tref+ trampTime*4.0+ sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt; 
 
	   	TimerCmp(delayTime1,US); 
        TrapezoidTwoFixTrampTimeStart( waveSel1_1,waveSel1_2,waveSel1_2,waveSel1_1,\
                                          tsel90, 0.0, t_comp, trampTime,gs_var, gs_comp);				
        
		noEchoes_loop:
        ech_cnt = ech_cnt+1.0;

		TimerCmp(delayTime2 ,US);
        TrapezoidOneFixTrampTimeStart( waveSel1_1,waveSel1_2,t_180,trampTime,gs_var); 		
    
		delayTime2 = delayTime2 + TE;
        if(ech_cnt < noEchoes)
        goto noEchoes_loop;	 

        if(grad_spoil_on==1.0)
		{
		 	TimerCmp(delayTimeSpoil ,US);
            TrapezoidOneFixTrampTimeStart( waveSel1_1,waveSel1_2,crushTime,trampTime,gradSpoilAmp);
		} 
		
        rep_cnt = rep_cnt + 1.0;
        if(rep_cnt < t1Count )
        goto fse_slice_loop; 
		
		rep_cnt1 = rep_cnt1 + 1.0;
        t1_cnt = t1_cnt + rep_cnt;
        if(t1_cnt < noSliceBlock )
        goto T1_loop;   
		
        goto averages_loop;
    }
      
    gradR:
    {
       
        double trampTime;
        double fixDelayTime;
        double t_comp;
        double delayTime1;
        double delayTime2;       
        double gr_var;
        double gr_comp;	
        double preTacq;
        double tacq;
        double totalsample;
        double noPreEffSample ;
		double t1CountTime;
		double t1seCountTime;
		double tmp_cnt;
        double rep_cnt;
		double rep_cnt1;
		double ech_cnt;
		double t1_cnt;
		double t1Count;
        int waveSel1_1;
        int waveSel1_2;
		
        trampTime = gradWavePoint * gradSamplePeriod;
        fixDelayTime =  UnifiedTDelay;		
        noPreEffSample = (noSamples - partialFreqSampling)*0.5 ;
        preTacq = AcquireDuration(samplePeriod,noPreEffSample);
        totalsample = preDiscard +  noSamples;
        tacq = AcquireDuration(samplePeriod,totalsample);
   
        gr_var = GardReadGain( samplePeriod, fovRead, ratiaFreqOversampling);
		t_comp = tsel90*0.5;
		gr_comp = gr_var*(preTacq+trampTime*0.5)/(tref+trampTime);
		
        waveSel1_1 = 0;
        waveSel1_2 = 1;
      
        averages_loop:        
        rep_cnt = 0.0;       
        WaitTrigger(); 
        t1_cnt = 0.0;  
        rep_cnt1 = 0.0;		
		
	    T1_loop:
		t1CountTime = 0.0;
		t1Count = 0.0;
        t1_slice_loop:               
		t1CountTime = t1CountTime+sepeceSliceTime;
		t1seCountTime = (T1*(rep_cnt1+1) + sepeceSliceTime*t1_cnt + t1CountTime)/1000.0;
		t1Count = t1Count + 1.0;
		tmp_cnt = t1Count + t1_cnt;
		if(t1seCountTime<TR)
		{
		    if(tmp_cnt<noSliceBlock)
			{
			    if(t1CountTime < T1 )
                goto t1_slice_loop;		        
			}
		}
        rep_cnt = 0.0;		
        fse_slice_loop: 
        ech_cnt = 0.0;		
        delayTime1 = fixDelayTime + tsel90 + 2*trampTime+sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt;  
        delayTime2 = fixDelayTime + tsel90*0.5 + TE - preTacq + sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt; 
		  
	    TimerCmp(delayTime1 ,US);
        TrapezoidOneFixTrampTimeStart( waveSel1_1,waveSel1_2,tref,trampTime,gr_comp); 	    
        
		noEchoes_loop:
        ech_cnt = ech_cnt+1.0;
        TimerCmp(delayTime2 ,US);
        TrapezoidOneFixTrampTimeStart( waveSel1_1,waveSel1_2,tacq,trampTime,gr_var);       
        delayTime2 = delayTime2 + TE;
        if(ech_cnt < noEchoes)
        goto noEchoes_loop;            
        
		rep_cnt = rep_cnt + 1.0;
        if(rep_cnt < t1Count )
        goto fse_slice_loop;

		rep_cnt1 = rep_cnt1 + 1.0;
        t1_cnt = t1_cnt + rep_cnt;
        if(t1_cnt < noSliceBlock )
        goto T1_loop;
          
        goto averages_loop; 
    }

 
    gradP:
    {
       
        double trampTime;
        double fixDelayTime;
        double holdTime1;
        double delayTime1;
		double delayTime2;
		double t1CountTime;
		double t1seCountTime;
		double tmp_cnt;
        double rep_cnt;
		double rep_cnt1;
		double t1_cnt;
		double ech_cnt;
		double t1Count;
        double gp_var;
		double gp_var_neg;
		double gp_var_rescale;
        double dummyShotEnout;
        double echoBlockCnt = 0.0;
		double afterTacq;
        double aftersample;
        double noPreEffSample;
        double preTacq;
        int waveSel1_1;
        int waveSel1_2;
		
        trampTime = gradWavePoint * gradSamplePeriod;
        fixDelayTime = UnifiedTDelay;
        aftersample = preDiscard +  (noSamples + partialFreqSampling)*0.5;
        afterTacq = AcquireDuration(samplePeriod,aftersample);
        noPreEffSample = (noSamples - partialFreqSampling)*0.5;
        preTacq = AcquireDuration(samplePeriod,noPreEffSample);
        holdTime1 = GardPhaseTime( fovPhase, gainEffPhase, noScans , noEchoes,  dummyShot, trampTime);
		gp_var_rescale = gainEffPhase*(holdTime1+trampTime)/(tref+trampTime);

        waveSel1_1 = 0;
        waveSel1_2 = 1;  
        averages_loop:
        rep_cnt = 0.0;  
        WaitTrigger(); 
		dummyShotEnout = DummyShotEn(dummyShot, noAverages,dummyn1, dummyn2, dummyn3, dummyn4,\
                                   dummyn5, dummyn6, dummyn7, dummyn8, dummyn9, dummyn10,\
                                   dummyn11, dummyn12, dummyn13, dummyn14, dummyn15,\
                                   dummyn16, dummyn17, dummyn18, dummyn19, dummyn20);
        if(dummyShotEnout==0.0)
             echoBlockCnt = GradEnScanCnt( noAverages);
        t1_cnt = 0.0;  
        rep_cnt1 = 0.0;		
		
	    T1_loop:
		t1CountTime = 0.0;
		t1Count = 0.0;
        t1_slice_loop:               
		t1CountTime = t1CountTime+sepeceSliceTime;
		t1seCountTime = (T1*(rep_cnt1+1) + sepeceSliceTime*t1_cnt + t1CountTime)/1000.0;
		t1Count = t1Count + 1.0;
		tmp_cnt = t1Count + t1_cnt;
		if(t1seCountTime<TR)
		{
		    if(tmp_cnt<noSliceBlock)
			{
			    if(t1CountTime < T1 )
                goto t1_slice_loop;		        
			}
		}
        rep_cnt = 0.0;	                  
        fse_slice_loop:
		ech_cnt = 0.0;
        delayTime1 = fixDelayTime + tsel90*0.5 + TE - preTacq -trampTime*2.0 -tref +sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt;       
        delayTime2 = fixDelayTime + tsel90*0.5 + TE + afterTacq + trampTime*2.0+ sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt; 
       
   	    noEchoes_loop:
        ech_cnt = ech_cnt + 1.0;
        if(dummyShotEnout==0.0)
        gp_var = ModePhaseCodeGain( modePhaseCode, effectiveEcho, noScans, noEchoes,\
		                               dummyShot,orderPhaseCode, modePartialPhaseSampling,\
					                   partialPhaseSampling,echoBlockCnt,ech_cnt, gp_var_rescale);
        else
        gp_var = 0.0;    
        gp_var_neg = 0.0 - gp_var; 
        TimerCmp(delayTime1,US); 
        TrapezoidOneFixTrampTimeStart( waveSel1_1,waveSel1_2,tref,trampTime,gp_var);          
        TimerCmp(delayTime2,US); 
        TrapezoidOneFixTrampTimeStart( waveSel1_1,waveSel1_2,tref,trampTime,gp_var_neg);                      
        delayTime1 = delayTime1 + TE;
        delayTime2 = delayTime2 + TE;             
        if(ech_cnt < noEchoes )
        goto noEchoes_loop;  
			
        rep_cnt = rep_cnt + 1.0;
        if(rep_cnt < t1Count )
        goto fse_slice_loop;

		rep_cnt1 = rep_cnt1 + 1.0;
        t1_cnt = t1_cnt + rep_cnt;
        if(t1_cnt < noSliceBlock )
        goto T1_loop;
          
        goto averages_loop; 
    }  

    tx1:
    {
        double trampTime;
        double fixDelayTime;
        double delayTime_rf90_1; 
        double delayTime_rf180_c1; 
		double delayTime_rfinv;
		double t1CountTime;
		double t1seCountTime;
		double tmp_cnt;		
        double rep_cnt;
		double rep_cnt1;
		double ech_cnt;
		double t1_cnt;
		double t1Count;
        double ttxgatepost = 10.0;                
        double ttxgatepre = 10.0; 
        double noSlice=0.0;     

        TxChannelShapeSel(CHANNEL1,rf_Shape_NO);
        trampTime = gradWavePoint * gradSamplePeriod;
        fixDelayTime = UnifiedTDelay+trampTime;
        tx_start:
        TxFirReset(); 
        WaitTrigger();
        TxAvePhase( modeAverage,noAverages,tx_freq_offset_data, tx_ph_offset_data,KHZ, CHANNEL1); 
        t1_cnt = 0.0;  
        rep_cnt1 = 0.0;		
		
	    T1_loop:
		t1CountTime = 0.0;
		t1Count = 0.0;
        t1_slice_loop:     
        noSlice = TxSliceCount( orderSlice,  noSliceBlock, t1_cnt);
      
        TxFreqSet( orderSlice, distanceSlice1, seperationSlice,thickSlice,\
                     noSlice, rf90Bandwidth, CHANNEL1,thickSliceRatioGain);		
		delayTime_rfinv = fixDelayTime+t1CountTime+ T1*rep_cnt1+sepeceSliceTime*t1_cnt;
		TxPhaseOffsetReg(CHANNEL1,rfinv_ph_offset_data);
        TxAttReg(CHANNEL1,rfinvScale);//ch,att db       
        TimerCmp(delayTime_rfinv,US);
        TxStart(CHANNEL1,tselinv,ttxgatepre,ttxgatepost);
		t1CountTime = t1CountTime+sepeceSliceTime;
		t1seCountTime = (T1*(rep_cnt1+1) + sepeceSliceTime*t1_cnt + t1CountTime)/1000.0;
		t1Count = t1Count + 1.0;
		tmp_cnt = t1Count + t1_cnt;
		if(t1seCountTime<TR)
		{
		    if(tmp_cnt<noSliceBlock)
			{
			    if(t1CountTime < T1 )
                goto t1_slice_loop;		        
			}
		}	
		
		rep_cnt = 0.0;		
        fse_slice_loop: 
        ech_cnt = 0.0;		
        noSlice = TxSliceCount( orderSlice,  noSliceBlock, t1_cnt);      
        TxFreqSet( orderSlice, distanceSlice1, seperationSlice,thickSlice,\
                     noSlice, rf90Bandwidth, CHANNEL1,thickSliceRatioGain);
        delayTime_rf90_1 = fixDelayTime+sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt; 
        delayTime_rf180_c1 = delayTime_rf90_1+TE*0.5;
        TxPhaseCycle(CHANNEL1, phaseCycle, noAverages,rep_cnt);
        TxAttReg(CHANNEL1,rf90Scale);//ch,att db 
        TimerCmp(delayTime_rf90_1,US);
        TxStart(CHANNEL1,tsel90,ttxgatepre,ttxgatepost);
		TxPhaseOffsetReg(CHANNEL1,0.0);
        noEchoes_loop:
		TxPhaseOffsetRam(CHANNEL1,ech_cnt,0.0);
        ech_cnt = ech_cnt+1.0;
        TxAttReg(CHANNEL1,rf180Scale);//ch,att db   
        TimerCmp(delayTime_rf180_c1,US);
        TxStart(CHANNEL1,tsel180,ttxgatepre,ttxgatepost);
        delayTime_rf180_c1 = delayTime_rf180_c1 + TE;
        if(ech_cnt < noEchoes)
        goto noEchoes_loop;
        
        rep_cnt = rep_cnt + 1.0;
        if(rep_cnt < t1Count )
        goto fse_slice_loop;

		rep_cnt1 = rep_cnt1 + 1.0;
        t1_cnt = t1_cnt + rep_cnt;
        if(t1_cnt < noSliceBlock )
        goto T1_loop;
    
        goto tx_start;
    }

    rx1:
    {
        double trampTime;
        double fixDelayTime;
        double sample_period;
        double delayTime_1; 
        double delayTime_c1; 
 		double t1CountTime;
		double t1seCountTime;
        double rep_cnt;
		double rep_cnt1;
		double t1_cnt;
		double t1Count;
		double tmp_cnt;
		double ech_cnt;
        double sample_total;
        double preTacq;
        double noPreEffSample;
        double trxgatepre = 10.0;                 
        double trxgatepost = 10.0; 

        rx_start:
      
        RxFreqOffsetReg(CHANNEL1,rx_freq_offset_data,KHZ);
        RxPhaseOffsetReg(CHANNEL1,rx_ph_offset_data);       
        RxFreqOffsetReg(CHANNEL2,rx_freq_offset_data,KHZ);
        RxPhaseOffsetReg(CHANNEL2,rx_ph_offset_data);     
        RxFreqOffsetReg(CHANNEL3,rx_freq_offset_data,KHZ);
        RxPhaseOffsetReg(CHANNEL3,rx_ph_offset_data);     
        RxFreqOffsetReg(CHANNEL4,rx_freq_offset_data,KHZ);
        RxPhaseOffsetReg(CHANNEL4,rx_ph_offset_data);  
        sample_total =preDiscard +  noSamples;
        sample_period=RxChannelAcquirePara(samplePeriod,sample_total);
        RxGainReg(CHANNEL1,rxGain);  //ch, db att  
        RxGainReg(CHANNEL2,rxGain);  //ch, db att  
        RxGainReg(CHANNEL3,rxGain);  //ch, db att  
        RxGainReg(CHANNEL4,rxGain);  //ch, db att  
        trampTime = gradWavePoint * gradSamplePeriod;
        fixDelayTime = TX_FILTER_DELAY-trxgatepre+trampTime+UnifiedTDelay;
        noPreEffSample = (noSamples - partialFreqSampling)*0.5;
        preTacq = AcquireDuration(samplePeriod,noPreEffSample);
        WaitTrigger();
        t1_cnt = 0.0;  
        rep_cnt1 = 0.0;		
		
	    T1_loop:
		t1CountTime = 0.0;
		t1Count = 0.0;
        t1_slice_loop: 
		t1CountTime = t1CountTime+sepeceSliceTime;
		t1seCountTime = (T1*(rep_cnt1+1) + sepeceSliceTime*t1_cnt + t1CountTime)/1000.0;
		t1Count = t1Count + 1.0;
		tmp_cnt = t1Count + t1_cnt;
		if(t1seCountTime<TR)
		{
		    if(tmp_cnt<noSliceBlock)
			{
			    if(t1CountTime < T1 )
                goto t1_slice_loop;		        
			}
		}	
		rep_cnt = 0.0; 
        fse_slice_loop:
        ech_cnt = 0.0;
        delayTime_c1 = fixDelayTime+TE-preTacq+tsel90*0.5 +sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt;  
        noEchoes_loop:
        ech_cnt = ech_cnt+1.0;
        RxPhaseOffsetReg(CHANNEL1,0.0);  
        TimerCmp(delayTime_c1,US);
        RxStart(15,trxgatepre,trxgatepost,sample_period);
        delayTime_c1 = delayTime_c1 + TE;
        if(ech_cnt < noEchoes)//noEchoes
        goto noEchoes_loop;
                 
        rep_cnt = rep_cnt + 1.0;
        if(rep_cnt < t1Count )
        goto fse_slice_loop;

		rep_cnt1 = rep_cnt1 + 1.0;
        t1_cnt = t1_cnt + rep_cnt;
        if(t1_cnt < noSliceBlock )
        goto T1_loop;
         
        goto rx_start;
    }

}
      






