/*-------------------------------------------------------------------------------------------------
(C) COPYRIGHT 2016 FIRSTECH Co., Ltd. ALL RIGHTS RESERVED
This software and the associated documentation are confidential and proprietary to Firstech Co., Ltd. 
Project name     :    MRI                                         
File name        :    ir_se.src                                            
Author           :    pengjing                                            
Contacts         :                                                
Date             :    2016.12.30                                            
File version     :                                                
Key words        :                                                
File discription :                                                
Modified history :                                                
Date       Author             Version          Details            
======================================================== 
2016.12.30   pengjing           v1.0         
--------------------------------------------------------------------------------------------------*/

#include "common.h"     
#include "grad.h"       
#include "tx.h"         
#include "rx.h"         
#include "mainctrl.h"   

double noEchoes = 1.0;                         
double noScans  = 256.0;  
double noAverages = 1.0;                     
double noSliceBlock = 1;//5.0;                       
double noSamples =256.0; 
double samplePeriod=30.0; 
double effectiveEcho = 1.0; 
double fovPhase = 250.0;
double fovRead  = 250.0;
double TR = 2000;//500.0;//ms        
double TE = 40000;//35000.0;//us
double T1 = 100000.0;//us
double distanceSlice1 = 0.0;
double thickSlice = 5.0;
double seperationSlice = 10.0;
double orderSlice = 1.0;
double ratioPhaseSampling = 1.0;
double ratioFreqSampling = 1.0;
double partialFreqSampling = 0.0;
double partialPhaseSampling = 0.0;
double modeAverage = 0.0;
double phaseCycle = 0.0;
double fovPhaseOffset = 0.0;
double fovReadOffset = 0.0;
double dummyShot = 0.0;
double modePhaseCode = 1.0;
double orderPhaseCode = 1.0;
double modePartialPhaseSampling = 0.0;
double flow_comp_on = 0;//1.0;
double UnifiedTDelay = 10.0;//Unified time delay(US)

int rf_Shape_NO =0;                       
double tsel90 =2560.0; //us 
double tsel180 =2560.0; //us  
double tselinv = 2560.0; //us
double rf90Bandwidth = 960.0;  
double rfinvBandwidth = 960.0;              
double rf90Scale=12.5;      
double rf180Scale=6.5; 
double rfinvScale=6.5;  
int gradWavePoint = 500;     
double gradStepLength_up = 757;
double gradStepLength_down = -757;        
double gradSamplePeriod = 1.0;//us                
double rxGain = 0.0;//db                  
double tx_freq_offset_data = 0.0;//KHZ    
double tx_ph_offset_data = 0.0;//0?? 
double rfinv_ph_offset_data = 0.0;//                     
double rx_freq_offset_data = 0.0;//KHZ    
double rx_ph_offset_data = 0.0;//0?? 
double sliceRephase = 1.0; //0 ->trephase_pre180 1 ->trephase_post180
double preDiscard = 2.0;

double thickSliceRatioGain = 1.32;
double gradMatrixSel = 2;//0;
double sepeceSliceTime = 50000.0; // TR/noSliceBlock > sepeceSliceTime >TE * noEchos 


double gainEffPhase = 300.0;
double preGradSTime = 0.0; //the time of gradslice before 90RF
double preGradRTime = 0.0; //the time of gradRead before sample
double ratiaFreqOversampling = 1.0;
double gradCompensation = 0.0; //the Trapezoid gain after sample
double tcrush = 1000.0;
double tref = 1500.0;

double dummyn1 =0.0; 
double dummyn2 =0.0; 
double dummyn3 =0.0; 
double dummyn4 =0.0; 
double dummyn5 =0.0; 
double dummyn6 =0.0; 
double dummyn7 =0.0; 
double dummyn8 =0.0; 
double dummyn9 =0.0; 
double dummyn10=0.0; 
double dummyn11=0.0; 
double dummyn12=0.0; 
double dummyn13=0.0; 
double dummyn14=0.0; 
double dummyn15=0.0; 
double dummyn16=0.0; 
double dummyn17=0.0; 
double dummyn18=0.0; 
double dummyn19=0.0; 
double dummyn20=0.0; 

double grad_spoil_on =1;
double gradSpoilAmp = 300.0;
double crushTime = 3000.0;

double IR_ON = 1;
             
void main()
{
    MainctrlTrigger( noAverages, noScans, TR);

    gradS:
    {

        double trampTime;
        double fixDelayTime;
        double t_comp;
        double t_refocus;
        double t_180;
	    double t_flow;
        double t_flow_temp;
	    double t_flow_1;
	    double t_flow_2;
		double t_flow_inv;
		double t_inv;
        double delayTime1;
        double delayTime2;
		double delayTime_inv;
	    double gs_var;
		double gs_inv;
        double gs_comp; 
		double t1CountTime;
		double t1seCountTime;
		double tmp_cnt;
        double rep_cnt;
		double rep_cnt1;
		double t1_cnt;
		double t1Count;
        int waveSel1_1;
        int waveSel1_2;
        double delayTimeSpoil;
        double aftersample;
        double afterTacq;
       
        trampTime = gradWavePoint ;//* gradSamplePeriod;
        fixDelayTime = UnifiedTDelay;
        aftersample = preDiscard +  (noSamples + partialFreqSampling)*0.5;
        afterTacq = AcquireDuration(samplePeriod,aftersample);
	   
        averages_loop: 
        GradMatSel(gradMatrixSel);
	    gs_var = GardSliceGain(rf90Bandwidth,thickSlice,thickSliceRatioGain);
		gs_inv = GardSliceGain(rfinvBandwidth,thickSlice,thickSliceRatioGain);
    	t_comp = tref;
		gs_comp = 0.5*gs_var*(tsel90+trampTime)/(t_comp+trampTime);
	    if(flow_comp_on==1.0)
	    {
		    t_comp = 2*tref + trampTime;
		    t_flow = tsel90/2-trampTime/2;
			gs_comp = gs_var*(tsel90+trampTime)/(t_comp+trampTime);
			
	    }	       
		t_refocus = 0.5*(tsel90+trampTime);
        t_flow_temp = tsel90 + trampTime + tcrush;
	    t_flow_1 = 2*t_flow_temp - (tsel180*0.5 + tcrush + tsel90*0.5 + trampTime);
	    t_flow_2 = t_flow_temp - trampTime;		
	    t_flow_inv = (tsel180/2) + (trampTime/2);	
		t_inv = t_flow_inv + tselinv;
		if(sliceRephase == 0.0){
		t_flow_1 = (tsel180/2) + tcrush + (trampTime/2);
		t_flow_2 = (tsel180/2) + tcrush - (trampTime/2);
		}
		
        t_180 = tsel180+2.0*tcrush+sliceRephase*t_refocus+flow_comp_on*t_flow_1;         
	  
        waveSel1_1 = 0;
        waveSel1_2 = 1;
       
        rep_cnt = 0.0;      
        WaitTrigger(); 

        t1_cnt = 0.0;  
        rep_cnt1 = 0.0;		
		
	    T1_loop:
		t1CountTime = 0.0;
		t1Count = 0.0;
        t1_slice_loop: 
        delayTime_inv = fixDelayTime+t1CountTime+ T1*rep_cnt1+sepeceSliceTime*t1_cnt;	
 	    if(flow_comp_on==0.0)
	    {
			TimerCmp(delayTime_inv ,US);
			GradGainRegStart_2(gradWavePoint,gradStepLength_up,tselinv,gs_inv*IR_ON);   
      GradGainRegStart_2(gradWavePoint,gradStepLength_down,0,gs_inv*IR_ON);
     //       TrapezoidOneFixTrampTimeStart( waveSel1_1,waveSel1_2,tselinv,trampTime,gs_inv); 
        }else{
		    TimerCmp(delayTime_inv ,US);
		    GradGainRegStart_2(gradWavePoint,gradStepLength_up,t_inv,gs_inv*IR_ON);   
        GradGainRegStart_2(gradWavePoint,gradStepLength_down,0,gs_inv*IR_ON);
        GradGainRegStart_2(gradWavePoint,gradStepLength_down,t_flow_inv,gs_inv*IR_ON);   
        GradGainRegStart_2(gradWavePoint,gradStepLength_up,0,gs_inv*IR_ON);
		//	TrapezoidTwoFixTrampTimeStart( waveSel1_1,waveSel1_2,waveSel1_2,waveSel1_1,\
     //                                     t_inv, 0.0, t_flow_inv, trampTime,gs_inv, gs_inv);	
		}		
		t1CountTime = t1CountTime+sepeceSliceTime;
		t1seCountTime = (T1*(rep_cnt1+1) + sepeceSliceTime*t1_cnt + t1CountTime)/1000.0;
		t1Count = t1Count + 1.0;
		tmp_cnt = t1Count + t1_cnt;
		if(t1seCountTime<TR)
		{
		    if(tmp_cnt<noSliceBlock)
			{
			    if(t1CountTime < T1 )
                goto t1_slice_loop;		        
			}
		}	
		
		rep_cnt = 0.0;
        se_slice_loop:  

        delayTime1 = fixDelayTime + sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt; 
        delayTime2 = fixDelayTime + TE*0.5  + preGradSTime + tsel90*0.5 - tsel180*0.5  -tcrush +sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt; 
        delayTimeSpoil = fixDelayTime + tsel90*0.5 + TE + afterTacq + trampTime*2+sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt;
 
 	    if(flow_comp_on==0.0)
	    {
	        if(sliceRephase==0.0)
			{
	   	    TimerCmp(delayTime1,US); 
	   	    GradGainRegStart_2(gradWavePoint,gradStepLength_up,tsel90,gs_var);   
          GradGainRegStart_2(gradWavePoint,gradStepLength_down,0,gs_var);
          GradGainRegStart_2(gradWavePoint,gradStepLength_down,t_comp,gs_comp);   
          GradGainRegStart_2(gradWavePoint,gradStepLength_up,0,gs_comp);
         //   TrapezoidTwoFixTrampTimeStart( waveSel1_1,waveSel1_2,waveSel1_2,waveSel1_1,\
         //                                 tsel90, 0.0, t_comp, trampTime,gs_var, gs_comp);			
			}else{
	   	    TimerCmp(delayTime1,US); 
	   	    GradGainRegStart_2(gradWavePoint,gradStepLength_up,tsel90,gs_var);   
          GradGainRegStart_2(gradWavePoint,gradStepLength_down,0,gs_var);
          //  TrapezoidOneFixTrampTimeStart( waveSel1_1,waveSel1_2,tsel90, trampTime,gs_var);				
			}

	        TimerCmp(delayTime2 ,US);
	        GradGainRegStart_2(gradWavePoint,gradStepLength_up,t_180,gs_var);   
          GradGainRegStart_2(gradWavePoint,gradStepLength_down,0,gs_var);
        //    TrapezoidOneFixTrampTimeStart( waveSel1_1,waveSel1_2,t_180,trampTime,gs_var); 
			
	    }else
	    {
	   	    if(sliceRephase==0.0)
			{
	   	    TimerCmp(delayTime1,US); 
	   	    GradGainRegStart_2(gradWavePoint,gradStepLength_up,tsel90,gs_var);   
          GradGainRegStart_2(gradWavePoint,gradStepLength_down,0,gs_var);
          GradGainRegStart_2(gradWavePoint,gradStepLength_down,t_comp,gs_comp);   
          GradGainRegStart_2(gradWavePoint,gradStepLength_up,0,gs_comp);
          GradGainRegStart_2(gradWavePoint,gradStepLength_up,t_flow,gs_var);   
          GradGainRegStart_2(gradWavePoint,gradStepLength_down,0,gs_var);
        //    TrapezoidThreeFixTrampTimeStart( waveSel1_1,waveSel1_2,waveSel1_2,waveSel1_1, waveSel1_1,waveSel1_2,\
       //                                      tsel90, 0.0, t_comp, 0.0, t_flow,trampTime,gs_var,gs_comp,gs_var);		
			}else{
	   	    TimerCmp(delayTime1,US); 
	   	    GradGainRegStart_2(gradWavePoint,gradStepLength_up,tsel90,gs_var);   
          GradGainRegStart_2(gradWavePoint,gradStepLength_down,0,gs_var);
         //   TrapezoidOneFixTrampTimeStart( waveSel1_1,waveSel1_2,tsel90, trampTime,gs_var);				
			}

	   	    TimerCmp(delayTime2 ,US);
	   	    GradGainRegStart_2(gradWavePoint,gradStepLength_up,t_180,gs_var);   
          GradGainRegStart_2(gradWavePoint,gradStepLength_down,0,gs_var);
          GradGainRegStart_2(gradWavePoint,gradStepLength_down,t_flow_2,gs_var);   
          GradGainRegStart_2(gradWavePoint,gradStepLength_up,0,gs_var);
         //   TrapezoidTwoFixTrampTimeStart( waveSel1_1,waveSel1_2,waveSel1_2,waveSel1_1,\
         //                                  t_180, 0.0, t_flow_2, trampTime,gs_var, gs_var);
	    }
     if(grad_spoil_on==1.0)
           {
                TimerCmp(delayTimeSpoil ,US);
                GradGainRegStart_2(gradWavePoint,gradStepLength_up,crushTime,gradSpoilAmp);   
                GradGainRegStart_2(gradWavePoint,gradStepLength_down,0,gradSpoilAmp);  
            // TrapezoidOneFixTrampTimeStart( waveSel1_1,waveSel1_2,crushTime,trampTime,gradSpoilAmp);
             } 
 
        rep_cnt = rep_cnt + 1.0;
        if(rep_cnt < t1Count )
        goto se_slice_loop;

		rep_cnt1 = rep_cnt1 + 1.0;
        t1_cnt = t1_cnt + rep_cnt;
        if(t1_cnt < noSliceBlock )
        goto T1_loop;
          
        goto averages_loop;
    }
       
    gradR:
    {
       
        double trampTime;
        double fixDelayTime;
        double t_comp;
        double delayTime1;
        double delayTime2;       
        double gr_var;
        double gr_comp;	
        double preTacq;
        double tacq;
        double totalsample;
        double noPreEffSample ;
		double t1CountTime;
		double t1seCountTime;
		double tmp_cnt;
        double rep_cnt;
		double rep_cnt1;
		double t1_cnt;
		double t1Count;
        int waveSel1_1;
        int waveSel1_2;
        double delayTimeSpoil;
        double aftersample;
        double afterTacq;
		
        trampTime = gradWavePoint ;//* gradSamplePeriod;
        fixDelayTime = UnifiedTDelay;

        aftersample = preDiscard +  (noSamples + partialFreqSampling)*0.5;
        afterTacq = AcquireDuration(samplePeriod,aftersample);
        noPreEffSample = (noSamples - partialFreqSampling)*0.5 ;
        preTacq = AcquireDuration(samplePeriod,noPreEffSample);
        totalsample = preDiscard +  noSamples;
        tacq = AcquireDuration(samplePeriod,totalsample);
      
        gr_var = GardReadGain( samplePeriod, fovRead, ratiaFreqOversampling);
		t_comp = tsel90*0.5;
		if(flow_comp_on==0.0)
		    gr_comp = gr_var*(preTacq+trampTime*0.5)/(tref+trampTime);
		else
		    gr_comp = gr_var*(tref + preTacq + trampTime*1.5)/(t_comp+trampTime);
		
        waveSel1_1 = 0;
        waveSel1_2 = 1;
      
        averages_loop:   
        WaitTrigger();       
        t1_cnt = 0.0;  
        rep_cnt1 = 0.0;		
		
	    T1_loop:
		t1CountTime = 0.0;
		t1Count = 0.0;
        t1_slice_loop:               
		t1CountTime = t1CountTime+sepeceSliceTime;
		t1seCountTime = (T1*(rep_cnt1+1) + sepeceSliceTime*t1_cnt + t1CountTime)/1000.0;
		t1Count = t1Count + 1.0;
		tmp_cnt = t1Count + t1_cnt;
		if(t1seCountTime<TR)
		{
		    if(tmp_cnt<noSliceBlock)
			{
			    if(t1CountTime < T1 )
                goto t1_slice_loop;		        
			}
		}	
		
		rep_cnt = 0.0;
        se_slice_loop:  
        delayTime1 = fixDelayTime + tsel90 + 2*trampTime+sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt; 
        delayTime2 = fixDelayTime + tsel90*0.5 + TE - preTacq - preGradRTime + sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt;
        delayTimeSpoil = fixDelayTime + tsel90*0.5 + TE + afterTacq + trampTime*2 +sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt;
		  
 	    if(flow_comp_on==0.0)
	    {
	        TimerCmp(delayTime1 ,US);
	        GradGainRegStart_2(gradWavePoint,gradStepLength_up,tref,gr_comp);   
          GradGainRegStart_2(gradWavePoint,gradStepLength_down,0,gr_comp);
        //    TrapezoidOneFixTrampTimeStart( waveSel1_1,waveSel1_2,tref,trampTime,gr_comp); 
	    }else
	    {
	   	    TimerCmp(delayTime1 ,US);
	   	    GradGainRegStart_2(gradWavePoint,gradStepLength_down,tref,gr_var);   
          GradGainRegStart_2(gradWavePoint,gradStepLength_up,0,gr_var);
          GradGainRegStart_2(gradWavePoint,gradStepLength_up,t_comp,gr_comp);   
          GradGainRegStart_2(gradWavePoint,gradStepLength_down,0,gr_comp);
        //    TrapezoidTwoFixTrampTimeStart( waveSel1_2,waveSel1_1,waveSel1_1,waveSel1_2,\
        //                                   tref, 0.0, t_comp, trampTime,gr_var, gr_comp);
	    }
        
		TimerCmp(delayTime2 ,US);
		GradGainRegStart_2(gradWavePoint,gradStepLength_up,tacq,gr_var);   
    GradGainRegStart_2(gradWavePoint,gradStepLength_down,0,gr_var);
     //   TrapezoidOneFixTrampTimeStart( waveSel1_1,waveSel1_2,tacq,trampTime,gr_var);          
           if(grad_spoil_on==1.0)
           {
               TimerCmp(delayTimeSpoil ,US);
               GradGainRegStart_2(gradWavePoint,gradStepLength_up,crushTime,gr_var);   
            GradGainRegStart_2(gradWavePoint,gradStepLength_down,0,gr_var);   
           // TrapezoidOneFixTrampTimeStart( waveSel1_1,waveSel1_2,crushTime,trampTime,gradGain2);
            }       
          
        rep_cnt = rep_cnt + 1.0;
        if(rep_cnt < t1Count )
        goto se_slice_loop;

		rep_cnt1 = rep_cnt1 + 1.0;
        t1_cnt = t1_cnt + rep_cnt;
        if(t1_cnt < noSliceBlock )
        goto T1_loop;
          
        goto averages_loop; 
    }


    gradP:
    {
       
        double trampTime;
        double fixDelayTime;
        double holdTime1;
        double delayTime1;
		double t1CountTime;
		double t1seCountTime;
		double tmp_cnt;		
        double rep_cnt;
		double rep_cnt1;
		double t1_cnt;
		double t1Count;
        double gp_var;
		double gp_var_rescale;
        double dummyShotEnout;
        double echoBlockCnt = 0.0;
        int waveSel1_1;
        int waveSel1_2;
        double delayTimeSpoil;
        double aftersample;
        double afterTacq;
        double noPreEffSample;
        double preTacq;
		
        trampTime = gradWavePoint ;//* gradSamplePeriod;
        fixDelayTime = UnifiedTDelay;
        aftersample = preDiscard +  (noSamples + partialFreqSampling)*0.5;
      afterTacq = AcquireDuration(samplePeriod,aftersample);
      noPreEffSample = (noSamples - partialFreqSampling)*0.5+preDiscard;
      preTacq = AcquireDuration(samplePeriod,noPreEffSample);

        holdTime1 = GardPhaseTime( fovPhase, gainEffPhase, noScans , noEchoes,  dummyShot, trampTime);
		gp_var_rescale = gainEffPhase*(holdTime1+trampTime)/(tref+trampTime);

        waveSel1_1 = 0;
        waveSel1_2 = 1;  
        averages_loop:    
        WaitTrigger(); 
    
        dummyShotEnout = DummyShotEn(dummyShot, noAverages,dummyn1, dummyn2, dummyn3, dummyn4,\
                                   dummyn5, dummyn6, dummyn7, dummyn8, dummyn9, dummyn10,\
                                   dummyn11, dummyn12, dummyn13, dummyn14, dummyn15,\
                                   dummyn16, dummyn17, dummyn18, dummyn19, dummyn20);
        if(dummyShotEnout==0.0)
             echoBlockCnt = GradEnScanCnt( noAverages);
        t1_cnt = 0.0;  
        rep_cnt1 = 0.0;		
		
	    T1_loop:
		t1CountTime = 0.0;
		t1Count = 0.0;
        t1_slice_loop:               
		t1CountTime = t1CountTime+sepeceSliceTime;
		t1seCountTime = (T1*(rep_cnt1+1) + sepeceSliceTime*t1_cnt + t1CountTime)/1000.0;
		t1Count = t1Count + 1.0;
		tmp_cnt = t1Count + t1_cnt;
		if(t1seCountTime<TR)
		{
		    if(tmp_cnt<noSliceBlock)
			{
			    if(t1CountTime < T1 )
                goto t1_slice_loop;		        
			}
		}	
		
		rep_cnt = 0.0;
        se_slice_loop: 
        delayTime1 = fixDelayTime + tsel90 + trampTime*2 +sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt;
        delayTimeSpoil = fixDelayTime + tsel90*0.5 + TE + afterTacq + trampTime*2 + sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt;
        if(dummyShotEnout==0.0)
        gp_var = ModePhaseCodeGain( modePhaseCode, effectiveEcho, noScans, noEchoes,\
		                               dummyShot,orderPhaseCode, modePartialPhaseSampling,\
					                   partialPhaseSampling,echoBlockCnt, 1.0, gp_var_rescale);
        else
             gp_var = 0.0;
         
        TimerCmp(delayTime1,US); 
        GradGainRegStart_2(gradWavePoint,gradStepLength_up,tref,gp_var);   
        GradGainRegStart_2(gradWavePoint,gradStepLength_down,0,gp_var);
      //  TrapezoidOneFixTrampTimeStart( waveSel1_1,waveSel1_2,tref,trampTime,gp_var);         
             if(grad_spoil_on==1.0)
           {
               TimerCmp(delayTimeSpoil ,US);
               GradGainRegStart_2(gradWavePoint,gradStepLength_down,tref,gp_var);   
        GradGainRegStart_2(gradWavePoint,gradStepLength_up,0,gp_var);  
      //      TrapezoidOneFixTrampTimeStart( waveSel1_2,waveSel1_1,holdTime1,trampTime,gradGain1);
            } 
 
        rep_cnt = rep_cnt + 1.0;
        if(rep_cnt < t1Count )
        goto se_slice_loop;

		rep_cnt1 = rep_cnt1 + 1.0;
        t1_cnt = t1_cnt + rep_cnt;
        if(t1_cnt < noSliceBlock )
        goto T1_loop;
          
        goto averages_loop; 
    }  
 
    tx1:
    {
        double trampTime;
        double fixDelayTime;
        double delayTime_rf90_1; 
        double delayTime_rf180_c1; 
		double delayTime_rfinv;
		double t1CountTime;
		double t1seCountTime;
		double tmp_cnt;		
        double rep_cnt;
		double rep_cnt1;
		double t1_cnt;
		double t1Count;
        double ttxgatepost = 10.0;                
        double ttxgatepre = 10.0; 
        double noSlice=0.0;     

        TxChannelShapeSel(CHANNEL1,rf_Shape_NO);
        trampTime = gradWavePoint ;//* gradSamplePeriod;
        fixDelayTime = UnifiedTDelay+trampTime;
        tx_start:
        TxFirReset(); 
        WaitTrigger();

        TxAvePhase( modeAverage,noAverages,tx_freq_offset_data, tx_ph_offset_data,KHZ, CHANNEL1);
        t1_cnt = 0.0;  
        rep_cnt1 = 0.0;		
		
	    T1_loop:
		t1CountTime = 0.0;
		t1Count = 0.0;
        t1_slice_loop:     
        noSlice = TxSliceCount( orderSlice,  noSliceBlock, t1_cnt);
      
        TxFreqSet( orderSlice, distanceSlice1, seperationSlice,thickSlice,\
                     noSlice, rf90Bandwidth, CHANNEL1,thickSliceRatioGain);		
		delayTime_rfinv = fixDelayTime+t1CountTime+ T1*rep_cnt1+sepeceSliceTime*t1_cnt;
		TxPhaseOffsetReg(CHANNEL1,rfinv_ph_offset_data);
        TxAttReg(CHANNEL1,rfinvScale);//ch,att db       
        TimerCmp(delayTime_rfinv,US);
      if(IR_ON ==1)
        TxStart(CHANNEL1,tselinv,ttxgatepre,ttxgatepost);
		t1CountTime = t1CountTime+sepeceSliceTime;
		t1seCountTime = (T1*(rep_cnt1+1) + sepeceSliceTime*t1_cnt + t1CountTime)/1000.0;
		t1Count = t1Count + 1.0;
		tmp_cnt = t1Count + t1_cnt;
		if(t1seCountTime<TR)
		{
		    if(tmp_cnt<noSliceBlock)
			{
			    if(t1CountTime < T1 )
                goto t1_slice_loop;		        
			}
		}	
		
		rep_cnt = 0.0;
        se_slice_loop:     
        noSlice = TxSliceCount( orderSlice,  noSliceBlock, t1_cnt);
      
        TxFreqSet( orderSlice, distanceSlice1, seperationSlice,thickSlice,\
                     noSlice, rf90Bandwidth, CHANNEL1,thickSliceRatioGain);
 
        delayTime_rf90_1 = fixDelayTime+sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt;
        delayTime_rf180_c1 = delayTime_rf90_1+TE*0.5;
        TxPhaseOffsetReg(CHANNEL1,tx_ph_offset_data);
        TxAttReg(CHANNEL1,rf90Scale);//ch,att db 
        TimerCmp(delayTime_rf90_1,US);
        TxStart(CHANNEL1,tsel90,ttxgatepre,ttxgatepost);
        TxPhaseOffsetReg(CHANNEL1,tx_ph_offset_data);
        TxAttReg(CHANNEL1,rf180Scale);//ch,att db       
        TimerCmp(delayTime_rf180_c1,US);
        TxStart(CHANNEL1,tsel180,ttxgatepre,ttxgatepost);
        
        rep_cnt = rep_cnt + 1.0;
        if(rep_cnt < t1Count )
        goto se_slice_loop;

		rep_cnt1 = rep_cnt1 + 1.0;
        t1_cnt = t1_cnt + rep_cnt;
        if(t1_cnt < noSliceBlock )
        goto T1_loop;
		
        goto tx_start;
    }

    rx1:
    {
        double trampTime;
        double fixDelayTime;
        double sample_period;
        double delayTime_1; 
        double delayTime_c1; 
		double t1CountTime;
		double t1seCountTime;
        double rep_cnt;
		double rep_cnt1;
		double t1_cnt;
		double t1Count;
		double tmp_cnt;
        double sample_total;
        double preTacq;
        double noPreEffSample;
        double trxgatepre = 10.0;                 
        double trxgatepost = 10.0; 

        rx_start:
      
        RxFreqOffsetReg(CHANNEL1,rx_freq_offset_data,KHZ);
        RxPhaseOffsetReg(CHANNEL1,rx_ph_offset_data);       
        RxFreqOffsetReg(CHANNEL2,rx_freq_offset_data,KHZ);
        RxPhaseOffsetReg(CHANNEL2,rx_ph_offset_data);     
        RxFreqOffsetReg(CHANNEL3,rx_freq_offset_data,KHZ);
        RxPhaseOffsetReg(CHANNEL3,rx_ph_offset_data);     
        RxFreqOffsetReg(CHANNEL4,rx_freq_offset_data,KHZ);
        RxPhaseOffsetReg(CHANNEL4,rx_ph_offset_data);  
        sample_total =preDiscard +  noSamples;
        sample_period=RxChannelAcquirePara(samplePeriod,sample_total);
        RxGainReg(CHANNEL1,rxGain);  //ch, db att  
        RxGainReg(CHANNEL2,rxGain);  //ch, db att  
        RxGainReg(CHANNEL3,rxGain);  //ch, db att  
        RxGainReg(CHANNEL4,rxGain);  //ch, db att  
        trampTime = gradWavePoint ;//* gradSamplePeriod;
        fixDelayTime = TX_FILTER_DELAY-trxgatepre+trampTime+UnifiedTDelay;
        noPreEffSample = (noSamples - partialFreqSampling)*0.5;
        preTacq = AcquireDuration(samplePeriod,noPreEffSample);
        WaitTrigger();
        t1_cnt = 0.0;  
        rep_cnt1 = 0.0;		
		
	    T1_loop:
		t1CountTime = 0.0;
		t1Count = 0.0;
        t1_slice_loop: 
		t1CountTime = t1CountTime+sepeceSliceTime;
		t1seCountTime = (T1*(rep_cnt1+1) + sepeceSliceTime*t1_cnt + t1CountTime)/1000.0;
		t1Count = t1Count + 1.0;
		tmp_cnt = t1Count + t1_cnt;
		if(t1seCountTime<TR)
		{
		    if(tmp_cnt<noSliceBlock)
			{
			    if(t1CountTime < T1 )
                goto t1_slice_loop;		        
			}
		}	
		rep_cnt = 0.0; 
        se_slice_loop:
        delayTime_c1 = fixDelayTime+TE-preTacq+tsel90*0.5+sepeceSliceTime*rep_cnt+T1*(rep_cnt1+1)+sepeceSliceTime*t1_cnt; 
        TimerCmp(delayTime_c1,US);
        RxStart(15,trxgatepre,trxgatepost,sample_period);
                 
        rep_cnt = rep_cnt + 1.0;
        if(rep_cnt < t1Count )
        goto se_slice_loop;

		rep_cnt1 = rep_cnt1 + 1.0;
        t1_cnt = t1_cnt + rep_cnt;
        if(t1_cnt < noSliceBlock )
        goto T1_loop;
         
        goto rx_start;
    }

}
      






